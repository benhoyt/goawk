// Code generated by "stringer -type=Op"; DO NOT EDIT.

package bytecode

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Nop-0]
	_ = x[Num-1]
	_ = x[Str-2]
	_ = x[Dupe-3]
	_ = x[Drop-4]
	_ = x[Field-5]
	_ = x[Global-6]
	_ = x[Local-7]
	_ = x[Special-8]
	_ = x[ArrayGlobal-9]
	_ = x[ArrayLocal-10]
	_ = x[InGlobal-11]
	_ = x[InLocal-12]
	_ = x[AssignField-13]
	_ = x[AssignGlobal-14]
	_ = x[AssignLocal-15]
	_ = x[AssignSpecial-16]
	_ = x[AssignArrayGlobal-17]
	_ = x[AssignArrayLocal-18]
	_ = x[DeleteGlobal-19]
	_ = x[DeleteLocal-20]
	_ = x[DeleteAllGlobal-21]
	_ = x[DeleteAllLocal-22]
	_ = x[PostIncrField-23]
	_ = x[PostIncrGlobal-24]
	_ = x[PostIncrLocal-25]
	_ = x[PostIncrSpecial-26]
	_ = x[PostIncrArrayGlobal-27]
	_ = x[PostIncrArrayLocal-28]
	_ = x[PostDecrField-29]
	_ = x[PostDecrGlobal-30]
	_ = x[PostDecrLocal-31]
	_ = x[PostDecrSpecial-32]
	_ = x[PostDecrArrayGlobal-33]
	_ = x[PostDecrArrayLocal-34]
	_ = x[AugAssignField-35]
	_ = x[AugAssignGlobal-36]
	_ = x[AugAssignLocal-37]
	_ = x[AugAssignSpecial-38]
	_ = x[AugAssignArrayGlobal-39]
	_ = x[AugAssignArrayLocal-40]
	_ = x[Regex-41]
	_ = x[Add-42]
	_ = x[Subtract-43]
	_ = x[Multiply-44]
	_ = x[Divide-45]
	_ = x[Power-46]
	_ = x[Modulo-47]
	_ = x[Equals-48]
	_ = x[NotEquals-49]
	_ = x[Less-50]
	_ = x[Greater-51]
	_ = x[LessOrEqual-52]
	_ = x[GreaterOrEqual-53]
	_ = x[Concat-54]
	_ = x[Match-55]
	_ = x[NotMatch-56]
	_ = x[Not-57]
	_ = x[UnaryMinus-58]
	_ = x[UnaryPlus-59]
	_ = x[Jump-60]
	_ = x[JumpFalse-61]
	_ = x[JumpTrue-62]
	_ = x[JumpNumEquals-63]
	_ = x[JumpNumNotEquals-64]
	_ = x[JumpNumLess-65]
	_ = x[JumpNumGreater-66]
	_ = x[JumpNumLessOrEqual-67]
	_ = x[JumpNumGreaterOrEqual-68]
	_ = x[JumpStrEquals-69]
	_ = x[JumpStrNotEquals-70]
	_ = x[Return-71]
	_ = x[Next-72]
	_ = x[Exit-73]
	_ = x[ForGlobalInGlobal-74]
	_ = x[ForGlobalInLocal-75]
	_ = x[ForLocalInGlobal-76]
	_ = x[ForLocalInLocal-77]
	_ = x[ForSpecialInGlobal-78]
	_ = x[ForSpecialInLocal-79]
	_ = x[BreakForIn-80]
	_ = x[CallAtan2-81]
	_ = x[CallClose-82]
	_ = x[CallCos-83]
	_ = x[CallExp-84]
	_ = x[CallFflush-85]
	_ = x[CallFflushAll-86]
	_ = x[CallGsub-87]
	_ = x[CallGsubField-88]
	_ = x[CallGsubGlobal-89]
	_ = x[CallGsubLocal-90]
	_ = x[CallGsubSpecial-91]
	_ = x[CallGsubArrayGlobal-92]
	_ = x[CallGsubArrayLocal-93]
	_ = x[CallIndex-94]
	_ = x[CallInt-95]
	_ = x[CallLength-96]
	_ = x[CallLengthArg-97]
	_ = x[CallLog-98]
	_ = x[CallMatch-99]
	_ = x[CallRand-100]
	_ = x[CallSin-101]
	_ = x[CallSplitGlobal-102]
	_ = x[CallSplitLocal-103]
	_ = x[CallSplitSepGlobal-104]
	_ = x[CallSplitSepLocal-105]
	_ = x[CallSprintf-106]
	_ = x[CallSqrt-107]
	_ = x[CallSrand-108]
	_ = x[CallSrandSeed-109]
	_ = x[CallSub-110]
	_ = x[CallSubField-111]
	_ = x[CallSubGlobal-112]
	_ = x[CallSubLocal-113]
	_ = x[CallSubSpecial-114]
	_ = x[CallSubArrayGlobal-115]
	_ = x[CallSubArrayLocal-116]
	_ = x[CallSubstr-117]
	_ = x[CallSubstrLength-118]
	_ = x[CallSystem-119]
	_ = x[CallTolower-120]
	_ = x[CallToupper-121]
	_ = x[CallUser-122]
	_ = x[CallNative-123]
	_ = x[Print-124]
	_ = x[Printf-125]
	_ = x[Getline-126]
	_ = x[GetlineFile-127]
	_ = x[GetlineCommand-128]
}

const _Op_name = "NopNumStrDupeDropFieldGlobalLocalSpecialArrayGlobalArrayLocalInGlobalInLocalAssignFieldAssignGlobalAssignLocalAssignSpecialAssignArrayGlobalAssignArrayLocalDeleteGlobalDeleteLocalDeleteAllGlobalDeleteAllLocalPostIncrFieldPostIncrGlobalPostIncrLocalPostIncrSpecialPostIncrArrayGlobalPostIncrArrayLocalPostDecrFieldPostDecrGlobalPostDecrLocalPostDecrSpecialPostDecrArrayGlobalPostDecrArrayLocalAugAssignFieldAugAssignGlobalAugAssignLocalAugAssignSpecialAugAssignArrayGlobalAugAssignArrayLocalRegexAddSubtractMultiplyDividePowerModuloEqualsNotEqualsLessGreaterLessOrEqualGreaterOrEqualConcatMatchNotMatchNotUnaryMinusUnaryPlusJumpJumpFalseJumpTrueJumpNumEqualsJumpNumNotEqualsJumpNumLessJumpNumGreaterJumpNumLessOrEqualJumpNumGreaterOrEqualJumpStrEqualsJumpStrNotEqualsReturnNextExitForGlobalInGlobalForGlobalInLocalForLocalInGlobalForLocalInLocalForSpecialInGlobalForSpecialInLocalBreakForInCallAtan2CallCloseCallCosCallExpCallFflushCallFflushAllCallGsubCallGsubFieldCallGsubGlobalCallGsubLocalCallGsubSpecialCallGsubArrayGlobalCallGsubArrayLocalCallIndexCallIntCallLengthCallLengthArgCallLogCallMatchCallRandCallSinCallSplitGlobalCallSplitLocalCallSplitSepGlobalCallSplitSepLocalCallSprintfCallSqrtCallSrandCallSrandSeedCallSubCallSubFieldCallSubGlobalCallSubLocalCallSubSpecialCallSubArrayGlobalCallSubArrayLocalCallSubstrCallSubstrLengthCallSystemCallTolowerCallToupperCallUserCallNativePrintPrintfGetlineGetlineFileGetlineCommand"

var _Op_index = [...]uint16{0, 3, 6, 9, 13, 17, 22, 28, 33, 40, 51, 61, 69, 76, 87, 99, 110, 123, 140, 156, 168, 179, 194, 208, 221, 235, 248, 263, 282, 300, 313, 327, 340, 355, 374, 392, 406, 421, 435, 451, 471, 490, 495, 498, 506, 514, 520, 525, 531, 537, 546, 550, 557, 568, 582, 588, 593, 601, 604, 614, 623, 627, 636, 644, 657, 673, 684, 698, 716, 737, 750, 766, 772, 776, 780, 797, 813, 829, 844, 862, 879, 889, 898, 907, 914, 921, 931, 944, 952, 965, 979, 992, 1007, 1026, 1044, 1053, 1060, 1070, 1083, 1090, 1099, 1107, 1114, 1129, 1143, 1161, 1178, 1189, 1197, 1206, 1219, 1226, 1238, 1251, 1263, 1277, 1295, 1312, 1322, 1338, 1348, 1359, 1370, 1378, 1388, 1393, 1399, 1406, 1417, 1431}

func (i Op) String() string {
	if i >= Op(len(_Op_index)-1) {
		return "Op(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Op_name[_Op_index[i]:_Op_index[i+1]]
}
