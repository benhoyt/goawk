// Code generated by "stringer -type=Op"; DO NOT EDIT.

package bytecode

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Nop-0]
	_ = x[Num-1]
	_ = x[Str-2]
	_ = x[Dupe-3]
	_ = x[Drop-4]
	_ = x[Field-5]
	_ = x[Global-6]
	_ = x[Local-7]
	_ = x[Special-8]
	_ = x[ArrayGlobal-9]
	_ = x[ArrayLocal-10]
	_ = x[InGlobal-11]
	_ = x[InLocal-12]
	_ = x[AssignField-13]
	_ = x[AssignGlobal-14]
	_ = x[AssignLocal-15]
	_ = x[AssignSpecial-16]
	_ = x[AssignArrayGlobal-17]
	_ = x[AssignArrayLocal-18]
	_ = x[DeleteGlobal-19]
	_ = x[DeleteLocal-20]
	_ = x[DeleteAllGlobal-21]
	_ = x[DeleteAllLocal-22]
	_ = x[IncrField-23]
	_ = x[IncrGlobal-24]
	_ = x[IncrLocal-25]
	_ = x[IncrSpecial-26]
	_ = x[IncrArrayGlobal-27]
	_ = x[IncrArrayLocal-28]
	_ = x[AugAssignField-29]
	_ = x[AugAssignGlobal-30]
	_ = x[AugAssignLocal-31]
	_ = x[AugAssignSpecial-32]
	_ = x[AugAssignArrayGlobal-33]
	_ = x[AugAssignArrayLocal-34]
	_ = x[Regex-35]
	_ = x[Add-36]
	_ = x[Subtract-37]
	_ = x[Multiply-38]
	_ = x[Divide-39]
	_ = x[Power-40]
	_ = x[Modulo-41]
	_ = x[Equals-42]
	_ = x[NotEquals-43]
	_ = x[Less-44]
	_ = x[Greater-45]
	_ = x[LessOrEqual-46]
	_ = x[GreaterOrEqual-47]
	_ = x[Concat-48]
	_ = x[Match-49]
	_ = x[NotMatch-50]
	_ = x[Not-51]
	_ = x[UnaryMinus-52]
	_ = x[UnaryPlus-53]
	_ = x[Boolean-54]
	_ = x[Jump-55]
	_ = x[JumpFalse-56]
	_ = x[JumpTrue-57]
	_ = x[JumpNumEquals-58]
	_ = x[JumpNumNotEquals-59]
	_ = x[JumpNumLess-60]
	_ = x[JumpNumGreater-61]
	_ = x[JumpNumLessOrEqual-62]
	_ = x[JumpNumGreaterOrEqual-63]
	_ = x[JumpStrEquals-64]
	_ = x[JumpStrNotEquals-65]
	_ = x[Return-66]
	_ = x[Next-67]
	_ = x[Exit-68]
	_ = x[ForGlobalInGlobal-69]
	_ = x[ForGlobalInLocal-70]
	_ = x[ForLocalInGlobal-71]
	_ = x[ForLocalInLocal-72]
	_ = x[ForSpecialInGlobal-73]
	_ = x[ForSpecialInLocal-74]
	_ = x[BreakForIn-75]
	_ = x[CallAtan2-76]
	_ = x[CallClose-77]
	_ = x[CallCos-78]
	_ = x[CallExp-79]
	_ = x[CallFflush-80]
	_ = x[CallFflushAll-81]
	_ = x[CallGsub-82]
	_ = x[CallGsubField-83]
	_ = x[CallGsubGlobal-84]
	_ = x[CallGsubLocal-85]
	_ = x[CallGsubSpecial-86]
	_ = x[CallGsubArrayGlobal-87]
	_ = x[CallGsubArrayLocal-88]
	_ = x[CallIndex-89]
	_ = x[CallInt-90]
	_ = x[CallLength-91]
	_ = x[CallLengthArg-92]
	_ = x[CallLog-93]
	_ = x[CallMatch-94]
	_ = x[CallRand-95]
	_ = x[CallSin-96]
	_ = x[CallSplitGlobal-97]
	_ = x[CallSplitLocal-98]
	_ = x[CallSplitSepGlobal-99]
	_ = x[CallSplitSepLocal-100]
	_ = x[CallSprintf-101]
	_ = x[CallSqrt-102]
	_ = x[CallSrand-103]
	_ = x[CallSrandSeed-104]
	_ = x[CallSub-105]
	_ = x[CallSubField-106]
	_ = x[CallSubGlobal-107]
	_ = x[CallSubLocal-108]
	_ = x[CallSubSpecial-109]
	_ = x[CallSubArrayGlobal-110]
	_ = x[CallSubArrayLocal-111]
	_ = x[CallSubstr-112]
	_ = x[CallSubstrLength-113]
	_ = x[CallSystem-114]
	_ = x[CallTolower-115]
	_ = x[CallToupper-116]
	_ = x[CallUser-117]
	_ = x[CallNative-118]
	_ = x[Print-119]
	_ = x[Printf-120]
	_ = x[Getline-121]
	_ = x[GetlineFile-122]
	_ = x[GetlineCommand-123]
}

const _Op_name = "NopNumStrDupeDropFieldGlobalLocalSpecialArrayGlobalArrayLocalInGlobalInLocalAssignFieldAssignGlobalAssignLocalAssignSpecialAssignArrayGlobalAssignArrayLocalDeleteGlobalDeleteLocalDeleteAllGlobalDeleteAllLocalIncrFieldIncrGlobalIncrLocalIncrSpecialIncrArrayGlobalIncrArrayLocalAugAssignFieldAugAssignGlobalAugAssignLocalAugAssignSpecialAugAssignArrayGlobalAugAssignArrayLocalRegexAddSubtractMultiplyDividePowerModuloEqualsNotEqualsLessGreaterLessOrEqualGreaterOrEqualConcatMatchNotMatchNotUnaryMinusUnaryPlusBooleanJumpJumpFalseJumpTrueJumpNumEqualsJumpNumNotEqualsJumpNumLessJumpNumGreaterJumpNumLessOrEqualJumpNumGreaterOrEqualJumpStrEqualsJumpStrNotEqualsReturnNextExitForGlobalInGlobalForGlobalInLocalForLocalInGlobalForLocalInLocalForSpecialInGlobalForSpecialInLocalBreakForInCallAtan2CallCloseCallCosCallExpCallFflushCallFflushAllCallGsubCallGsubFieldCallGsubGlobalCallGsubLocalCallGsubSpecialCallGsubArrayGlobalCallGsubArrayLocalCallIndexCallIntCallLengthCallLengthArgCallLogCallMatchCallRandCallSinCallSplitGlobalCallSplitLocalCallSplitSepGlobalCallSplitSepLocalCallSprintfCallSqrtCallSrandCallSrandSeedCallSubCallSubFieldCallSubGlobalCallSubLocalCallSubSpecialCallSubArrayGlobalCallSubArrayLocalCallSubstrCallSubstrLengthCallSystemCallTolowerCallToupperCallUserCallNativePrintPrintfGetlineGetlineFileGetlineCommand"

var _Op_index = [...]uint16{0, 3, 6, 9, 13, 17, 22, 28, 33, 40, 51, 61, 69, 76, 87, 99, 110, 123, 140, 156, 168, 179, 194, 208, 217, 227, 236, 247, 262, 276, 290, 305, 319, 335, 355, 374, 379, 382, 390, 398, 404, 409, 415, 421, 430, 434, 441, 452, 466, 472, 477, 485, 488, 498, 507, 514, 518, 527, 535, 548, 564, 575, 589, 607, 628, 641, 657, 663, 667, 671, 688, 704, 720, 735, 753, 770, 780, 789, 798, 805, 812, 822, 835, 843, 856, 870, 883, 898, 917, 935, 944, 951, 961, 974, 981, 990, 998, 1005, 1020, 1034, 1052, 1069, 1080, 1088, 1097, 1110, 1117, 1129, 1142, 1154, 1168, 1186, 1203, 1213, 1229, 1239, 1250, 1261, 1269, 1279, 1284, 1290, 1297, 1308, 1322}

func (i Op) String() string {
	if i >= Op(len(_Op_index)-1) {
		return "Op(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Op_name[_Op_index[i]:_Op_index[i+1]]
}
