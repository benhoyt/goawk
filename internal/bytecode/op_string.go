// Code generated by "stringer -type=Op"; DO NOT EDIT.

package bytecode

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Nop-0]
	_ = x[Num-1]
	_ = x[Str-2]
	_ = x[Dupe-3]
	_ = x[Drop-4]
	_ = x[Field-5]
	_ = x[Global-6]
	_ = x[Local-7]
	_ = x[Special-8]
	_ = x[ArrayGlobal-9]
	_ = x[ArrayLocal-10]
	_ = x[InGlobal-11]
	_ = x[InLocal-12]
	_ = x[AssignField-13]
	_ = x[AssignGlobal-14]
	_ = x[AssignLocal-15]
	_ = x[AssignSpecial-16]
	_ = x[AssignArrayGlobal-17]
	_ = x[AssignArrayLocal-18]
	_ = x[DeleteGlobal-19]
	_ = x[DeleteLocal-20]
	_ = x[DeleteAllGlobal-21]
	_ = x[DeleteAllLocal-22]
	_ = x[IncrField-23]
	_ = x[IncrGlobal-24]
	_ = x[IncrLocal-25]
	_ = x[IncrSpecial-26]
	_ = x[IncrArrayGlobal-27]
	_ = x[IncrArrayLocal-28]
	_ = x[DecrField-29]
	_ = x[DecrGlobal-30]
	_ = x[DecrLocal-31]
	_ = x[DecrSpecial-32]
	_ = x[DecrArrayGlobal-33]
	_ = x[DecrArrayLocal-34]
	_ = x[AugAssignField-35]
	_ = x[AugAssignGlobal-36]
	_ = x[AugAssignLocal-37]
	_ = x[AugAssignSpecial-38]
	_ = x[AugAssignArrayGlobal-39]
	_ = x[AugAssignArrayLocal-40]
	_ = x[Regex-41]
	_ = x[Add-42]
	_ = x[Subtract-43]
	_ = x[Multiply-44]
	_ = x[Divide-45]
	_ = x[Power-46]
	_ = x[Modulo-47]
	_ = x[Equals-48]
	_ = x[NotEquals-49]
	_ = x[Less-50]
	_ = x[Greater-51]
	_ = x[LessOrEqual-52]
	_ = x[GreaterOrEqual-53]
	_ = x[Concat-54]
	_ = x[Match-55]
	_ = x[NotMatch-56]
	_ = x[Not-57]
	_ = x[UnaryMinus-58]
	_ = x[UnaryPlus-59]
	_ = x[Boolean-60]
	_ = x[Jump-61]
	_ = x[JumpFalse-62]
	_ = x[JumpTrue-63]
	_ = x[JumpNumEquals-64]
	_ = x[JumpNumNotEquals-65]
	_ = x[JumpNumLess-66]
	_ = x[JumpNumGreater-67]
	_ = x[JumpNumLessOrEqual-68]
	_ = x[JumpNumGreaterOrEqual-69]
	_ = x[JumpStrEquals-70]
	_ = x[JumpStrNotEquals-71]
	_ = x[Return-72]
	_ = x[Next-73]
	_ = x[Exit-74]
	_ = x[ForGlobalInGlobal-75]
	_ = x[ForGlobalInLocal-76]
	_ = x[ForLocalInGlobal-77]
	_ = x[ForLocalInLocal-78]
	_ = x[ForSpecialInGlobal-79]
	_ = x[ForSpecialInLocal-80]
	_ = x[BreakForIn-81]
	_ = x[CallAtan2-82]
	_ = x[CallClose-83]
	_ = x[CallCos-84]
	_ = x[CallExp-85]
	_ = x[CallFflush-86]
	_ = x[CallFflushAll-87]
	_ = x[CallGsub-88]
	_ = x[CallGsubField-89]
	_ = x[CallGsubGlobal-90]
	_ = x[CallGsubLocal-91]
	_ = x[CallGsubSpecial-92]
	_ = x[CallGsubArrayGlobal-93]
	_ = x[CallGsubArrayLocal-94]
	_ = x[CallIndex-95]
	_ = x[CallInt-96]
	_ = x[CallLength-97]
	_ = x[CallLengthArg-98]
	_ = x[CallLog-99]
	_ = x[CallMatch-100]
	_ = x[CallRand-101]
	_ = x[CallSin-102]
	_ = x[CallSplitGlobal-103]
	_ = x[CallSplitLocal-104]
	_ = x[CallSplitSepGlobal-105]
	_ = x[CallSplitSepLocal-106]
	_ = x[CallSprintf-107]
	_ = x[CallSqrt-108]
	_ = x[CallSrand-109]
	_ = x[CallSrandSeed-110]
	_ = x[CallSub-111]
	_ = x[CallSubField-112]
	_ = x[CallSubGlobal-113]
	_ = x[CallSubLocal-114]
	_ = x[CallSubSpecial-115]
	_ = x[CallSubArrayGlobal-116]
	_ = x[CallSubArrayLocal-117]
	_ = x[CallSubstr-118]
	_ = x[CallSubstrLength-119]
	_ = x[CallSystem-120]
	_ = x[CallTolower-121]
	_ = x[CallToupper-122]
	_ = x[CallUser-123]
	_ = x[CallNative-124]
	_ = x[Print-125]
	_ = x[Printf-126]
	_ = x[Getline-127]
	_ = x[GetlineFile-128]
	_ = x[GetlineCommand-129]
}

const _Op_name = "NopNumStrDupeDropFieldGlobalLocalSpecialArrayGlobalArrayLocalInGlobalInLocalAssignFieldAssignGlobalAssignLocalAssignSpecialAssignArrayGlobalAssignArrayLocalDeleteGlobalDeleteLocalDeleteAllGlobalDeleteAllLocalIncrFieldIncrGlobalIncrLocalIncrSpecialIncrArrayGlobalIncrArrayLocalDecrFieldDecrGlobalDecrLocalDecrSpecialDecrArrayGlobalDecrArrayLocalAugAssignFieldAugAssignGlobalAugAssignLocalAugAssignSpecialAugAssignArrayGlobalAugAssignArrayLocalRegexAddSubtractMultiplyDividePowerModuloEqualsNotEqualsLessGreaterLessOrEqualGreaterOrEqualConcatMatchNotMatchNotUnaryMinusUnaryPlusBooleanJumpJumpFalseJumpTrueJumpNumEqualsJumpNumNotEqualsJumpNumLessJumpNumGreaterJumpNumLessOrEqualJumpNumGreaterOrEqualJumpStrEqualsJumpStrNotEqualsReturnNextExitForGlobalInGlobalForGlobalInLocalForLocalInGlobalForLocalInLocalForSpecialInGlobalForSpecialInLocalBreakForInCallAtan2CallCloseCallCosCallExpCallFflushCallFflushAllCallGsubCallGsubFieldCallGsubGlobalCallGsubLocalCallGsubSpecialCallGsubArrayGlobalCallGsubArrayLocalCallIndexCallIntCallLengthCallLengthArgCallLogCallMatchCallRandCallSinCallSplitGlobalCallSplitLocalCallSplitSepGlobalCallSplitSepLocalCallSprintfCallSqrtCallSrandCallSrandSeedCallSubCallSubFieldCallSubGlobalCallSubLocalCallSubSpecialCallSubArrayGlobalCallSubArrayLocalCallSubstrCallSubstrLengthCallSystemCallTolowerCallToupperCallUserCallNativePrintPrintfGetlineGetlineFileGetlineCommand"

var _Op_index = [...]uint16{0, 3, 6, 9, 13, 17, 22, 28, 33, 40, 51, 61, 69, 76, 87, 99, 110, 123, 140, 156, 168, 179, 194, 208, 217, 227, 236, 247, 262, 276, 285, 295, 304, 315, 330, 344, 358, 373, 387, 403, 423, 442, 447, 450, 458, 466, 472, 477, 483, 489, 498, 502, 509, 520, 534, 540, 545, 553, 556, 566, 575, 582, 586, 595, 603, 616, 632, 643, 657, 675, 696, 709, 725, 731, 735, 739, 756, 772, 788, 803, 821, 838, 848, 857, 866, 873, 880, 890, 903, 911, 924, 938, 951, 966, 985, 1003, 1012, 1019, 1029, 1042, 1049, 1058, 1066, 1073, 1088, 1102, 1120, 1137, 1148, 1156, 1165, 1178, 1185, 1197, 1210, 1222, 1236, 1254, 1271, 1281, 1297, 1307, 1318, 1329, 1337, 1347, 1352, 1358, 1365, 1376, 1390}

func (i Op) String() string {
	if i >= Op(len(_Op_index)-1) {
		return "Op(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Op_name[_Op_index[i]:_Op_index[i+1]]
}
