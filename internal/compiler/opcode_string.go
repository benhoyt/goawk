// Code generated by "stringer -type=Opcode"; DO NOT EDIT.

package compiler

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Nop-0]
	_ = x[Num-1]
	_ = x[Str-2]
	_ = x[Dupe-3]
	_ = x[Drop-4]
	_ = x[Field-5]
	_ = x[FieldNum-6]
	_ = x[Global-7]
	_ = x[Local-8]
	_ = x[Special-9]
	_ = x[ArrayGlobal-10]
	_ = x[ArrayLocal-11]
	_ = x[InGlobal-12]
	_ = x[InLocal-13]
	_ = x[AssignField-14]
	_ = x[AssignGlobal-15]
	_ = x[AssignLocal-16]
	_ = x[AssignSpecial-17]
	_ = x[AssignArrayGlobal-18]
	_ = x[AssignArrayLocal-19]
	_ = x[DeleteGlobal-20]
	_ = x[DeleteLocal-21]
	_ = x[DeleteAllGlobal-22]
	_ = x[DeleteAllLocal-23]
	_ = x[IncrField-24]
	_ = x[IncrGlobal-25]
	_ = x[IncrLocal-26]
	_ = x[IncrSpecial-27]
	_ = x[IncrArrayGlobal-28]
	_ = x[IncrArrayLocal-29]
	_ = x[AugAssignField-30]
	_ = x[AugAssignGlobal-31]
	_ = x[AugAssignLocal-32]
	_ = x[AugAssignSpecial-33]
	_ = x[AugAssignArrayGlobal-34]
	_ = x[AugAssignArrayLocal-35]
	_ = x[Regex-36]
	_ = x[Add-37]
	_ = x[Subtract-38]
	_ = x[Multiply-39]
	_ = x[Divide-40]
	_ = x[Power-41]
	_ = x[Modulo-42]
	_ = x[Equals-43]
	_ = x[NotEquals-44]
	_ = x[Less-45]
	_ = x[Greater-46]
	_ = x[LessOrEqual-47]
	_ = x[GreaterOrEqual-48]
	_ = x[Concat-49]
	_ = x[Match-50]
	_ = x[NotMatch-51]
	_ = x[Not-52]
	_ = x[UnaryMinus-53]
	_ = x[UnaryPlus-54]
	_ = x[Boolean-55]
	_ = x[Jump-56]
	_ = x[JumpFalse-57]
	_ = x[JumpTrue-58]
	_ = x[JumpNumEquals-59]
	_ = x[JumpNumNotEquals-60]
	_ = x[JumpNumLess-61]
	_ = x[JumpNumGreater-62]
	_ = x[JumpNumLessOrEqual-63]
	_ = x[JumpNumGreaterOrEqual-64]
	_ = x[JumpStrEquals-65]
	_ = x[JumpStrNotEquals-66]
	_ = x[Return-67]
	_ = x[Next-68]
	_ = x[Exit-69]
	_ = x[ForGlobalInGlobal-70]
	_ = x[ForGlobalInLocal-71]
	_ = x[ForLocalInGlobal-72]
	_ = x[ForLocalInLocal-73]
	_ = x[ForSpecialInGlobal-74]
	_ = x[ForSpecialInLocal-75]
	_ = x[BreakForIn-76]
	_ = x[CallAtan2-77]
	_ = x[CallClose-78]
	_ = x[CallCos-79]
	_ = x[CallExp-80]
	_ = x[CallFflush-81]
	_ = x[CallFflushAll-82]
	_ = x[CallGsub-83]
	_ = x[CallGsubField-84]
	_ = x[CallGsubGlobal-85]
	_ = x[CallGsubLocal-86]
	_ = x[CallGsubSpecial-87]
	_ = x[CallGsubArrayGlobal-88]
	_ = x[CallGsubArrayLocal-89]
	_ = x[CallIndex-90]
	_ = x[CallInt-91]
	_ = x[CallLength-92]
	_ = x[CallLengthArg-93]
	_ = x[CallLog-94]
	_ = x[CallMatch-95]
	_ = x[CallRand-96]
	_ = x[CallSin-97]
	_ = x[CallSplitGlobal-98]
	_ = x[CallSplitLocal-99]
	_ = x[CallSplitSepGlobal-100]
	_ = x[CallSplitSepLocal-101]
	_ = x[CallSprintf-102]
	_ = x[CallSqrt-103]
	_ = x[CallSrand-104]
	_ = x[CallSrandSeed-105]
	_ = x[CallSub-106]
	_ = x[CallSubField-107]
	_ = x[CallSubGlobal-108]
	_ = x[CallSubLocal-109]
	_ = x[CallSubSpecial-110]
	_ = x[CallSubArrayGlobal-111]
	_ = x[CallSubArrayLocal-112]
	_ = x[CallSubstr-113]
	_ = x[CallSubstrLength-114]
	_ = x[CallSystem-115]
	_ = x[CallTolower-116]
	_ = x[CallToupper-117]
	_ = x[CallUser-118]
	_ = x[CallNative-119]
	_ = x[Print-120]
	_ = x[Printf-121]
	_ = x[Getline-122]
	_ = x[GetlineFile-123]
	_ = x[GetlineCommand-124]
}

const _Opcode_name = "NopNumStrDupeDropFieldFieldNumGlobalLocalSpecialArrayGlobalArrayLocalInGlobalInLocalAssignFieldAssignGlobalAssignLocalAssignSpecialAssignArrayGlobalAssignArrayLocalDeleteGlobalDeleteLocalDeleteAllGlobalDeleteAllLocalIncrFieldIncrGlobalIncrLocalIncrSpecialIncrArrayGlobalIncrArrayLocalAugAssignFieldAugAssignGlobalAugAssignLocalAugAssignSpecialAugAssignArrayGlobalAugAssignArrayLocalRegexAddSubtractMultiplyDividePowerModuloEqualsNotEqualsLessGreaterLessOrEqualGreaterOrEqualConcatMatchNotMatchNotUnaryMinusUnaryPlusBooleanJumpJumpFalseJumpTrueJumpNumEqualsJumpNumNotEqualsJumpNumLessJumpNumGreaterJumpNumLessOrEqualJumpNumGreaterOrEqualJumpStrEqualsJumpStrNotEqualsReturnNextExitForGlobalInGlobalForGlobalInLocalForLocalInGlobalForLocalInLocalForSpecialInGlobalForSpecialInLocalBreakForInCallAtan2CallCloseCallCosCallExpCallFflushCallFflushAllCallGsubCallGsubFieldCallGsubGlobalCallGsubLocalCallGsubSpecialCallGsubArrayGlobalCallGsubArrayLocalCallIndexCallIntCallLengthCallLengthArgCallLogCallMatchCallRandCallSinCallSplitGlobalCallSplitLocalCallSplitSepGlobalCallSplitSepLocalCallSprintfCallSqrtCallSrandCallSrandSeedCallSubCallSubFieldCallSubGlobalCallSubLocalCallSubSpecialCallSubArrayGlobalCallSubArrayLocalCallSubstrCallSubstrLengthCallSystemCallTolowerCallToupperCallUserCallNativePrintPrintfGetlineGetlineFileGetlineCommand"

var _Opcode_index = [...]uint16{0, 3, 6, 9, 13, 17, 22, 30, 36, 41, 48, 59, 69, 77, 84, 95, 107, 118, 131, 148, 164, 176, 187, 202, 216, 225, 235, 244, 255, 270, 284, 298, 313, 327, 343, 363, 382, 387, 390, 398, 406, 412, 417, 423, 429, 438, 442, 449, 460, 474, 480, 485, 493, 496, 506, 515, 522, 526, 535, 543, 556, 572, 583, 597, 615, 636, 649, 665, 671, 675, 679, 696, 712, 728, 743, 761, 778, 788, 797, 806, 813, 820, 830, 843, 851, 864, 878, 891, 906, 925, 943, 952, 959, 969, 982, 989, 998, 1006, 1013, 1028, 1042, 1060, 1077, 1088, 1096, 1105, 1118, 1125, 1137, 1150, 1162, 1176, 1194, 1211, 1221, 1237, 1247, 1258, 1269, 1277, 1287, 1292, 1298, 1305, 1316, 1330}

func (i Opcode) String() string {
	if i >= Opcode(len(_Opcode_index)-1) {
		return "Opcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Opcode_name[_Opcode_index[i]:_Opcode_index[i+1]]
}
