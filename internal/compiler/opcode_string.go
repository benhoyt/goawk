// Code generated by "stringer -type=Opcode,AugOp"; DO NOT EDIT.

package compiler

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Nop-0]
	_ = x[Num-1]
	_ = x[Str-2]
	_ = x[Dupe-3]
	_ = x[Drop-4]
	_ = x[Swap-5]
	_ = x[Field-6]
	_ = x[FieldNum-7]
	_ = x[Global-8]
	_ = x[Local-9]
	_ = x[Special-10]
	_ = x[ArrayGlobal-11]
	_ = x[ArrayLocal-12]
	_ = x[InGlobal-13]
	_ = x[InLocal-14]
	_ = x[AssignField-15]
	_ = x[AssignGlobal-16]
	_ = x[AssignLocal-17]
	_ = x[AssignSpecial-18]
	_ = x[AssignArrayGlobal-19]
	_ = x[AssignArrayLocal-20]
	_ = x[Delete-21]
	_ = x[DeleteAll-22]
	_ = x[IncrField-23]
	_ = x[IncrGlobal-24]
	_ = x[IncrLocal-25]
	_ = x[IncrSpecial-26]
	_ = x[IncrArrayGlobal-27]
	_ = x[IncrArrayLocal-28]
	_ = x[AugAssignField-29]
	_ = x[AugAssignGlobal-30]
	_ = x[AugAssignLocal-31]
	_ = x[AugAssignSpecial-32]
	_ = x[AugAssignArrayGlobal-33]
	_ = x[AugAssignArrayLocal-34]
	_ = x[Regex-35]
	_ = x[MultiIndex-36]
	_ = x[Add-37]
	_ = x[Subtract-38]
	_ = x[Multiply-39]
	_ = x[Divide-40]
	_ = x[Power-41]
	_ = x[Modulo-42]
	_ = x[Equals-43]
	_ = x[NotEquals-44]
	_ = x[Less-45]
	_ = x[Greater-46]
	_ = x[LessOrEqual-47]
	_ = x[GreaterOrEqual-48]
	_ = x[Concat-49]
	_ = x[Match-50]
	_ = x[NotMatch-51]
	_ = x[Not-52]
	_ = x[UnaryMinus-53]
	_ = x[UnaryPlus-54]
	_ = x[Boolean-55]
	_ = x[Jump-56]
	_ = x[JumpFalse-57]
	_ = x[JumpTrue-58]
	_ = x[JumpEquals-59]
	_ = x[JumpNotEquals-60]
	_ = x[JumpLess-61]
	_ = x[JumpGreater-62]
	_ = x[JumpLessOrEqual-63]
	_ = x[JumpGreaterOrEqual-64]
	_ = x[Next-65]
	_ = x[Exit-66]
	_ = x[ForIn-67]
	_ = x[BreakForIn-68]
	_ = x[CallAtan2-69]
	_ = x[CallClose-70]
	_ = x[CallCos-71]
	_ = x[CallExp-72]
	_ = x[CallFflush-73]
	_ = x[CallFflushAll-74]
	_ = x[CallGsub-75]
	_ = x[CallIndex-76]
	_ = x[CallInt-77]
	_ = x[CallLength-78]
	_ = x[CallLengthArg-79]
	_ = x[CallLog-80]
	_ = x[CallMatch-81]
	_ = x[CallRand-82]
	_ = x[CallSin-83]
	_ = x[CallSplit-84]
	_ = x[CallSplitSep-85]
	_ = x[CallSprintf-86]
	_ = x[CallSqrt-87]
	_ = x[CallSrand-88]
	_ = x[CallSrandSeed-89]
	_ = x[CallSub-90]
	_ = x[CallSubstr-91]
	_ = x[CallSubstrLength-92]
	_ = x[CallSystem-93]
	_ = x[CallTolower-94]
	_ = x[CallToupper-95]
	_ = x[CallUser-96]
	_ = x[CallNative-97]
	_ = x[Return-98]
	_ = x[ReturnNull-99]
	_ = x[Nulls-100]
	_ = x[Print-101]
	_ = x[Printf-102]
	_ = x[Getline-103]
	_ = x[GetlineField-104]
	_ = x[GetlineGlobal-105]
	_ = x[GetlineLocal-106]
	_ = x[GetlineSpecial-107]
	_ = x[GetlineArray-108]
	_ = x[EndOpcode-109]
}

const _Opcode_name = "NopNumStrDupeDropSwapFieldFieldNumGlobalLocalSpecialArrayGlobalArrayLocalInGlobalInLocalAssignFieldAssignGlobalAssignLocalAssignSpecialAssignArrayGlobalAssignArrayLocalDeleteDeleteAllIncrFieldIncrGlobalIncrLocalIncrSpecialIncrArrayGlobalIncrArrayLocalAugAssignFieldAugAssignGlobalAugAssignLocalAugAssignSpecialAugAssignArrayGlobalAugAssignArrayLocalRegexMultiIndexAddSubtractMultiplyDividePowerModuloEqualsNotEqualsLessGreaterLessOrEqualGreaterOrEqualConcatMatchNotMatchNotUnaryMinusUnaryPlusBooleanJumpJumpFalseJumpTrueJumpEqualsJumpNotEqualsJumpLessJumpGreaterJumpLessOrEqualJumpGreaterOrEqualNextExitForInBreakForInCallAtan2CallCloseCallCosCallExpCallFflushCallFflushAllCallGsubCallIndexCallIntCallLengthCallLengthArgCallLogCallMatchCallRandCallSinCallSplitCallSplitSepCallSprintfCallSqrtCallSrandCallSrandSeedCallSubCallSubstrCallSubstrLengthCallSystemCallTolowerCallToupperCallUserCallNativeReturnReturnNullNullsPrintPrintfGetlineGetlineFieldGetlineGlobalGetlineLocalGetlineSpecialGetlineArrayEndOpcode"

var _Opcode_index = [...]uint16{0, 3, 6, 9, 13, 17, 21, 26, 34, 40, 45, 52, 63, 73, 81, 88, 99, 111, 122, 135, 152, 168, 174, 183, 192, 202, 211, 222, 237, 251, 265, 280, 294, 310, 330, 349, 354, 364, 367, 375, 383, 389, 394, 400, 406, 415, 419, 426, 437, 451, 457, 462, 470, 473, 483, 492, 499, 503, 512, 520, 530, 543, 551, 562, 577, 595, 599, 603, 608, 618, 627, 636, 643, 650, 660, 673, 681, 690, 697, 707, 720, 727, 736, 744, 751, 760, 772, 783, 791, 800, 813, 820, 830, 846, 856, 867, 878, 886, 896, 902, 912, 917, 922, 928, 935, 947, 960, 972, 986, 998, 1007}

func (i Opcode) String() string {
	if i < 0 || i >= Opcode(len(_Opcode_index)-1) {
		return "Opcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Opcode_name[_Opcode_index[i]:_Opcode_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AugOpAdd-0]
	_ = x[AugOpSub-1]
	_ = x[AugOpMul-2]
	_ = x[AugOpDiv-3]
	_ = x[AugOpPow-4]
	_ = x[AugOpMod-5]
}

const _AugOp_name = "AugOpAddAugOpSubAugOpMulAugOpDivAugOpPowAugOpMod"

var _AugOp_index = [...]uint8{0, 8, 16, 24, 32, 40, 48}

func (i AugOp) String() string {
	if i < 0 || i >= AugOp(len(_AugOp_index)-1) {
		return "AugOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _AugOp_name[_AugOp_index[i]:_AugOp_index[i+1]]
}
