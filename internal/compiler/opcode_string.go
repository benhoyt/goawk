// Code generated by "stringer -type=Opcode"; DO NOT EDIT.

package compiler

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Nop-0]
	_ = x[Num-1]
	_ = x[Str-2]
	_ = x[Dupe-3]
	_ = x[Drop-4]
	_ = x[Swap-5]
	_ = x[Field-6]
	_ = x[FieldNum-7]
	_ = x[Global-8]
	_ = x[Local-9]
	_ = x[Special-10]
	_ = x[ArrayGlobal-11]
	_ = x[ArrayLocal-12]
	_ = x[InGlobal-13]
	_ = x[InLocal-14]
	_ = x[AssignField-15]
	_ = x[AssignGlobal-16]
	_ = x[AssignLocal-17]
	_ = x[AssignSpecial-18]
	_ = x[AssignArrayGlobal-19]
	_ = x[AssignArrayLocal-20]
	_ = x[Delete-21]
	_ = x[DeleteAll-22]
	_ = x[IncrField-23]
	_ = x[IncrGlobal-24]
	_ = x[IncrLocal-25]
	_ = x[IncrSpecial-26]
	_ = x[IncrArrayGlobal-27]
	_ = x[IncrArrayLocal-28]
	_ = x[AugAssignField-29]
	_ = x[AugAssignGlobal-30]
	_ = x[AugAssignLocal-31]
	_ = x[AugAssignSpecial-32]
	_ = x[AugAssignArrayGlobal-33]
	_ = x[AugAssignArrayLocal-34]
	_ = x[Regex-35]
	_ = x[MultiIndex-36]
	_ = x[Add-37]
	_ = x[Subtract-38]
	_ = x[Multiply-39]
	_ = x[Divide-40]
	_ = x[Power-41]
	_ = x[Modulo-42]
	_ = x[Equals-43]
	_ = x[NotEquals-44]
	_ = x[Less-45]
	_ = x[Greater-46]
	_ = x[LessOrEqual-47]
	_ = x[GreaterOrEqual-48]
	_ = x[Concat-49]
	_ = x[Match-50]
	_ = x[NotMatch-51]
	_ = x[Not-52]
	_ = x[UnaryMinus-53]
	_ = x[UnaryPlus-54]
	_ = x[Boolean-55]
	_ = x[Jump-56]
	_ = x[JumpFalse-57]
	_ = x[JumpTrue-58]
	_ = x[JumpEquals-59]
	_ = x[JumpNotEquals-60]
	_ = x[JumpLess-61]
	_ = x[JumpGreater-62]
	_ = x[JumpLessOrEqual-63]
	_ = x[JumpGreaterOrEqual-64]
	_ = x[Next-65]
	_ = x[Exit-66]
	_ = x[ForInGlobal-67]
	_ = x[ForInLocal-68]
	_ = x[ForInSpecial-69]
	_ = x[BreakForIn-70]
	_ = x[CallAtan2-71]
	_ = x[CallClose-72]
	_ = x[CallCos-73]
	_ = x[CallExp-74]
	_ = x[CallFflush-75]
	_ = x[CallFflushAll-76]
	_ = x[CallGsub-77]
	_ = x[CallIndex-78]
	_ = x[CallInt-79]
	_ = x[CallLength-80]
	_ = x[CallLengthArg-81]
	_ = x[CallLog-82]
	_ = x[CallMatch-83]
	_ = x[CallRand-84]
	_ = x[CallSin-85]
	_ = x[CallSplit-86]
	_ = x[CallSplitSep-87]
	_ = x[CallSprintf-88]
	_ = x[CallSqrt-89]
	_ = x[CallSrand-90]
	_ = x[CallSrandSeed-91]
	_ = x[CallSub-92]
	_ = x[CallSubstr-93]
	_ = x[CallSubstrLength-94]
	_ = x[CallSystem-95]
	_ = x[CallTolower-96]
	_ = x[CallToupper-97]
	_ = x[CallUser-98]
	_ = x[CallNative-99]
	_ = x[Return-100]
	_ = x[ReturnNull-101]
	_ = x[Nulls-102]
	_ = x[Print-103]
	_ = x[Printf-104]
	_ = x[Getline-105]
	_ = x[GetlineField-106]
	_ = x[GetlineGlobal-107]
	_ = x[GetlineLocal-108]
	_ = x[GetlineSpecial-109]
	_ = x[GetlineArray-110]
	_ = x[EndOpcode-111]
}

const _Opcode_name = "NopNumStrDupeDropSwapFieldFieldNumGlobalLocalSpecialArrayGlobalArrayLocalInGlobalInLocalAssignFieldAssignGlobalAssignLocalAssignSpecialAssignArrayGlobalAssignArrayLocalDeleteDeleteAllIncrFieldIncrGlobalIncrLocalIncrSpecialIncrArrayGlobalIncrArrayLocalAugAssignFieldAugAssignGlobalAugAssignLocalAugAssignSpecialAugAssignArrayGlobalAugAssignArrayLocalRegexMultiIndexAddSubtractMultiplyDividePowerModuloEqualsNotEqualsLessGreaterLessOrEqualGreaterOrEqualConcatMatchNotMatchNotUnaryMinusUnaryPlusBooleanJumpJumpFalseJumpTrueJumpEqualsJumpNotEqualsJumpLessJumpGreaterJumpLessOrEqualJumpGreaterOrEqualNextExitForInGlobalForInLocalForInSpecialBreakForInCallAtan2CallCloseCallCosCallExpCallFflushCallFflushAllCallGsubCallIndexCallIntCallLengthCallLengthArgCallLogCallMatchCallRandCallSinCallSplitCallSplitSepCallSprintfCallSqrtCallSrandCallSrandSeedCallSubCallSubstrCallSubstrLengthCallSystemCallTolowerCallToupperCallUserCallNativeReturnReturnNullNullsPrintPrintfGetlineGetlineFieldGetlineGlobalGetlineLocalGetlineSpecialGetlineArrayEndOpcode"

var _Opcode_index = [...]uint16{0, 3, 6, 9, 13, 17, 21, 26, 34, 40, 45, 52, 63, 73, 81, 88, 99, 111, 122, 135, 152, 168, 174, 183, 192, 202, 211, 222, 237, 251, 265, 280, 294, 310, 330, 349, 354, 364, 367, 375, 383, 389, 394, 400, 406, 415, 419, 426, 437, 451, 457, 462, 470, 473, 483, 492, 499, 503, 512, 520, 530, 543, 551, 562, 577, 595, 599, 603, 614, 624, 636, 646, 655, 664, 671, 678, 688, 701, 709, 718, 725, 735, 748, 755, 764, 772, 779, 788, 800, 811, 819, 828, 841, 848, 858, 874, 884, 895, 906, 914, 924, 930, 940, 945, 950, 956, 963, 975, 988, 1000, 1014, 1026, 1035}

func (i Opcode) String() string {
	if i < 0 || i >= Opcode(len(_Opcode_index)-1) {
		return "Opcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Opcode_name[_Opcode_index[i]:_Opcode_index[i+1]]
}
