=== RUN   TestInterp
=== RUN   TestInterp/BEGIN_{_print_"b"_}
=== RUN   TestInterp/BEGIN_{_print_"b"_}#01
=== RUN   TestInterp/END_{_print_"e"_}
=== RUN   TestInterp/END_{_print_"e"_}#01
=== RUN   TestInterp/BEGIN_{_print_"b"}_END_{_print_"e"_}
=== RUN   TestInterp/BEGIN_{_print_"b"}_END_{_print_"e"_}#01
=== RUN   TestInterp/BEGIN_{_print_"b"}_$0_{_print_NR_}_END_{_print_"e"_}
=== RUN   TestInterp/BEGIN_{_printf_"x"_};_BEGIN_{_printf_"y"_}
=== RUN   TestInterp/$0
=== RUN   TestInterp/{_print_$0_}
=== RUN   TestInterp/$1=="foo"
=== RUN   TestInterp/$1==42
=== RUN   TestInterp/$1=="42"
=== RUN   TestInterp//foo/
=== RUN   TestInterp/NR==2,_NR==4
=== RUN   TestInterp/_NR==2,_NR==4_{_print_$0_}_NR==3,_NR==5_{_print_NR_}_
=== RUN   TestInterp/BEGIN_{_print_"x",_"y"_}
=== RUN   TestInterp/BEGIN_{_print_OFS;_OFS_=_",";_print_"x",_"y"_}
=== RUN   TestInterp/BEGIN_{_print_ORS;_ORS_=_".";_print_"x",_"y"_}
=== RUN   TestInterp/BEGIN_{_print_ORS;_ORS_=_"";_print_"x",_"y"_}
=== RUN   TestInterp/{_print;_print_}
=== RUN   TestInterp/BEGIN_{_print;_print_}
=== RUN   TestInterp/BEGIN_{_printf_"%%_%d_%x_%c_%f_%s",_42,_42,_42,_42,_42_}
=== RUN   TestInterp/BEGIN_{_printf_"%3d",_42_}
=== RUN   TestInterp/BEGIN_{_printf_"%3s",_"x"_}
=== RUN   TestInterp/BEGIN_{_printf_"%.1g",_42_}__#_!windows-gawk
=== RUN   TestInterp/BEGIN_{_printf_"%d",_12,_34_}
=== RUN   TestInterp/BEGIN_{_printf_"%d"_}
=== RUN   TestInterp/BEGIN_{_printf_"%c",_0_}
=== RUN   TestInterp/BEGIN_{_printf_"%c",_127_}
=== RUN   TestInterp/BEGIN_{_printf_"%c",_128_}__#_!gawk
=== RUN   TestInterp/BEGIN_{_printf_"%c",_255_}__#_!gawk
=== RUN   TestInterp/BEGIN_{_printf_"%c",_256_}__#_!awk_!gawk
=== RUN   TestInterp/BEGIN_{_printf_"%c",_"xyz"_}
=== RUN   TestInterp/BEGIN_{_printf_"%c",_""_}__#_!awk
=== RUN   TestInterp/BEGIN_{_printf_}__#_!awk_-_doesn't_error_on_this
=== RUN   TestInterp/BEGIN_{_printf("%%%dd",_4)_}
=== RUN   TestInterp/BEGIN_{_if_(1)_print_"t";_}
=== RUN   TestInterp/BEGIN_{_if_(0)_print_"t";_}
=== RUN   TestInterp/BEGIN_{_if_(1)_print_"t";_else_print_"f"_}
=== RUN   TestInterp/BEGIN_{_if_(0)_print_"t";_else_print_"f"_}
=== RUN   TestInterp/BEGIN_{_for_(;;)_{_print_"x";_break_}_}
=== RUN   TestInterp/BEGIN_{_for_(;;)_{_printf_"%d_",_i;_i++;_if_(i>2)_break;_}_}
=== RUN   TestInterp/BEGIN_{_for_(i=5;_;_)_{_printf_"%d_",_i;_i++;_if_(i>8)_break;_}_}
=== RUN   TestInterp/BEGIN_{_for_(i=5;_;_i++)_{_printf_"%d_",_i;_if_(i>8)_break;_}_}
=== RUN   TestInterp/BEGIN_{_for_(i=5;_i<8;_i++)_{_printf_"%d_",_i_}_}
=== RUN   TestInterp/BEGIN_{_for_(i=0;_i<10;_i++)_{_if_(i_<_5)_continue;_printf_"%d_",_i_}_
=== RUN   TestInterp/BEGIN_{_a[1]=1;_a[2]=1;_for_(k_in_a)_{_s++;_break_}_print_s_}
=== RUN   TestInterp/BEGIN_{_a[1]=1;_a[2]=1;_a[3]=1;_for_(k_in_a)_{_if_(k==2)_continue;_s++
=== RUN   TestInterp/BEGIN_{_while_(i<3)_{_i++;_s++;_break_}_print_s_}
=== RUN   TestInterp/BEGIN_{_while_(i<3)_{_i++;_if_(i==2)_continue;_s++_}_print_s_}
=== RUN   TestInterp/BEGIN_{_do_{_i++;_s++;_break_}_while_(i<3);_print_s_}
=== RUN   TestInterp/BEGIN_{_do_{_i++;_if_(i==2)_continue;_s++_}_while_(i<3);_print_s_}
=== RUN   TestInterp/BEGIN_{_a["x"]_=_3;_a["y"]_=_4;_for_(k_in_a)_x_+=_a[k];_print_x_}
=== RUN   TestInterp/BEGIN_{_while_(i_<_5)_{_print_i;_i++_}_}
=== RUN   TestInterp/BEGIN_{_do_{_print_i;_i++_}_while_(i_<_5)_}
=== RUN   TestInterp/BEGIN_{_for_(i=0;_i<10;_i++);_printf_"x"_}
=== RUN   TestInterp/_BEGIN_{__for_(i_=_0;_i_<_1;_i++)_{___for_(j_=_0;_j_<_1;_j++)_{____pri
=== RUN   TestInterp/_BEGIN_{__for_(i_=_0;_i_<_1;_i++)_{___for_(j_=_0;_j_<_1;_j++)_{____pri#01
=== RUN   TestInterp/{_if_(NR==2)_next;_print_}
=== RUN   TestInterp/{_if_(NR==2)_f();_print_}__function_f()_{_next_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestInterp/BEGIN_{_next_}
=== RUN   TestInterp/END_{_next_}
=== RUN   TestInterp/BEGIN_{_a["x"]_=_3;_print_"x"_in_a,_"y"_in_a_}
=== RUN   TestInterp/BEGIN_{_a["x"]_=_3;_a["y"]_=_4;_delete_a["x"];_for_(k_in_a)_print_k,_a
=== RUN   TestInterp/BEGIN_{_a["x"]_=_3;_a["y"]_=_4;_for_(k_in_a)_delete_a[k];_for_(k_in_a)
=== RUN   TestInterp/BEGIN_{_a["x"];_"y"_in_a;_for_(k_in_a)_print_k,_a[k]_}
=== RUN   TestInterp/BEGIN_{_a[]_}
=== RUN   TestInterp/BEGIN_{_delete_a[]_}
=== RUN   TestInterp/BEGIN_{_a["x"]_=_3;_a["y"]_=_4;_delete_a;_for_(k_in_a)_print_k,_a[k]_}
=== RUN   TestInterp/BEGIN_{_print_!42,_!1,_!0,_!!42,_!!1,_!!0_}
=== RUN   TestInterp/BEGIN_{_print_!42,_!1,_!0,_!!42,_!!1,_!!0_}#01
=== RUN   TestInterp/BEGIN_{_print_+4,_+"3",_+0,_+-3,_-3,_-_-4,_-"3"_}
=== RUN   TestInterp/BEGIN_{_$0="0";_print_!$0_}
=== RUN   TestInterp/BEGIN_{_$0="1";_print_!$0_}
=== RUN   TestInterp/{_print_!$0_}
=== RUN   TestInterp/{_print_!$0_}#01
=== RUN   TestInterp/!seen[$0]++
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.IncrExpr
=== RUN   TestInterp/!seen[$0]--
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.IncrExpr
=== RUN   TestInterp/BEGIN_{_print_(1==1,_1==0,_"1"==1,_"1"==1.0)_}
=== RUN   TestInterp/{_print_($0=="1",_$0==1)_}
=== RUN   TestInterp/{_print_($1=="1",_$1==1)_}
=== RUN   TestInterp/BEGIN_{_print_(1!=1,_1!=0,_"1"!=1,_"1"!=1.0)_}
=== RUN   TestInterp/{_print_($0!="1",_$0!=1)_}
=== RUN   TestInterp/{_print_($1!="1",_$1!=1)_}
=== RUN   TestInterp/BEGIN_{_print_(0<1,_1<1,_2<1,_"12"<"2")_}
=== RUN   TestInterp/{_print_($1<2)_}
=== RUN   TestInterp/BEGIN_{_print_(0<=1,_1<=1,_2<=1,_"12"<="2")_}
=== RUN   TestInterp/{_print_($1<=2)_}
=== RUN   TestInterp/BEGIN_{_print_(0>1,_1>1,_2>1,_"12">"2")_}
=== RUN   TestInterp/{_print_($1>2)_}
=== RUN   TestInterp/BEGIN_{_print_(0>=1,_1>=1,_2>=1,_"12">="2")_}
=== RUN   TestInterp/{_print_($1>=2)_}
=== RUN   TestInterp/{_print($0<2)_}
=== RUN   TestInterp/{_print($1<2)_}
=== RUN   TestInterp/{_print($1<2)_}#01
=== RUN   TestInterp/BEGIN_{_$0="10";_print($0<2)_}
=== RUN   TestInterp/BEGIN_{_$1="10";_print($1<2)_}
=== RUN   TestInterp/BEGIN_{_$1="10x";_print($1<2)_}
=== RUN   TestInterp/_function_t()_{_print_"t";_return_2_}_function_f()_{_print_"f";_return
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestInterp/_function_t()_{_print_"t";_return_2_}_function_f()_{_print_"f";_return#01
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestInterp/BEGIN_{_print_0&&0,_0&&2,_2&&0,_2&&2_}
=== RUN   TestInterp/BEGIN_{_print_0||0,_0||2,_2||0,_2||2_}
=== RUN   TestInterp/BEGIN_{_print_1+2,_1+2+3,_1+-2,_-1+2,_"1"+"2",_3+.14_}
=== RUN   TestInterp/BEGIN_{_print_1-2,_1-2-3,_1-+2,_-1-2,_"1"-"2",_3-.14_}
=== RUN   TestInterp/BEGIN_{_print_2*3,_2*3*4,_2*-3,_-2*3,_"2"*"3",_3*.14_}
=== RUN   TestInterp/BEGIN_{_print_2/3,_2/3/4,_2/-3,_-2/3,_"2"/"3",_3/.14_}
=== RUN   TestInterp/BEGIN_{_print_2%3,_2%3%4,_2%-3,_-2%3,_"2"%"3",_3%.14_}
=== RUN   TestInterp/BEGIN_{_print_2^3,_2^3^3,_2^-3,_-2^3,_"2"^"3",_3^.14_}
=== RUN   TestInterp/BEGIN_{_print_1_2,_"x"_"yz",_1+2_3+4_}
=== RUN   TestInterp/BEGIN_{_print_"food"~/oo/,_"food"~/[oO]+d/,_"food"~"f",_"food"~"F",_"f
=== RUN   TestInterp/BEGIN_{_print_"food"!~/oo/,_"food"!~/[oO]+d/,_"food"!~"f",_"food"!~"F"
=== RUN   TestInterp/BEGIN_{_print_1+2*3/4^5%6_7,_(1+2)*3/4^5%6_"7"_}
=== RUN   TestInterp/BEGIN_{_print_1,_1.,_.1,_1e0,_-1,_1e_}
=== RUN   TestInterp/BEGIN_{_print_'\"'_'\''_'xy'_"z"_"'"_'\"'_}
=== RUN   TestInterp/{_print_/foo/_}
=== RUN   TestInterp//[a-/
=== RUN   TestInterp/BEGIN_{_print_"-12"+0,_"+12"+0,_"_\t\r\n7foo"+0,_".5"+0,_"5."+0,_"+."+
=== RUN   TestInterp/BEGIN_{_print_"1e3"+0,_"1.2e-1"+0,_"1e+1"+0,_"1e"+0,_"1e+"+0_}
=== RUN   TestInterp/BEGIN_{_print_-(11102200000000000000000000000000000000_1040000)_}__#_!
=== RUN   TestInterp/BEGIN_{_print_atan2(0,_8020020000000e20G-0)}
=== RUN   TestInterp/BEGIN_{_print_1e1000,_-1e1000_}__#_!gawk
=== RUN   TestInterp/BEGIN_{_printf_"\x0.\x00.\x0A\x10\xff\xFF\x41"_}__#_!awk
=== RUN   TestInterp/BEGIN_{_printf_"\x1.\x01.\x0A\x10\xff\xFF\x41"_}
=== RUN   TestInterp/BEGIN_{_printf_"\0\78\7\77\777\0_\141_"_}__#_!awk
=== RUN   TestInterp/BEGIN_{_printf_"\1\78\7\77\777\1_\141_"_}
=== RUN   TestInterp/BEGIN_{_e="x";_E="X";_print_1e,_1E_}
=== RUN   TestInterp/BEGIN_{_e="x";_E="X";_print_1e1e,_1E1E_}
=== RUN   TestInterp/BEGIN_{_a=2;_print_1e+a,_1E+a,_1e+1,_1E+1_}
=== RUN   TestInterp/BEGIN_{_a=2;_print_1e-a,_1E-a,_1e-1,_1E-1_}
=== RUN   TestInterp/BEGIN_{_print_1e+_}
=== RUN   TestInterp/BEGIN_{_print_1e-_}
=== RUN   TestInterp/{_print_/x/?"t":"f"_}
=== RUN   TestInterp/BEGIN_{_print_1?2?3:4:5,_1?0?3:4:5,_0?2?3:4:5_}
=== RUN   TestInterp/BEGIN_{_$0="0";_print_($0?1:0)_}
=== RUN   TestInterp/{_print_$0?1:0_}
=== RUN   TestInterp/{_print_$0?1:0_}#01
=== RUN   TestInterp/BEGIN_{_$0="1";_print_($0?1:0)_}
=== RUN   TestInterp/BEGIN_{_print_0?1:0,_1?1:0,_""?1:0,_"0"?1:0,_"1"?1:0,_x?1:0_}
=== RUN   TestInterp/_BEGIN_{__print_CONVFMT,_1.2345678_""__CONVFMT_=_"%.3g"__print_CONVFMT
=== RUN   TestInterp/BEGIN_{_FILENAME_=_"foo";_print_FILENAME_}
=== RUN   TestInterp/BEGIN_{_FILENAME_=_"123.0";_print_(FILENAME==123)_}
=== RUN   TestInterp/BEGIN_{_FNR_=_123;_print_FNR_}
=== RUN   TestInterp/{_print_FNR,_$0_}
=== RUN   TestInterp/BEGIN_{_print_"|"_FS_"|";_FS=","_}_{_print_$1,_$2_}
=== RUN   TestInterp/BEGIN_{_print_"|"_FS_"|";_FS="\\."_}_{_print_$1,_$2_}
=== RUN   TestInterp/BEGIN_{_FS="\\"_}_{_print_$1,_$2_}
=== RUN   TestInterp/{_print_NF_}
=== RUN   TestInterp/BEGIN_{_NR_=_123;_print_NR_}
=== RUN   TestInterp/{_print_NR,_$0_}
=== RUN   TestInterp/_BEGIN_{__print_OFMT,_1.2345678__OFMT_=_"%.3g"__print_OFMT,_1.234567_}
=== RUN   TestInterp/BEGIN_{_print_RSTART,_RLENGTH;_RSTART=5;_RLENGTH=42;_print_RSTART,_RLE
=== RUN   TestInterp/BEGIN_{_print_RS_}
=== RUN   TestInterp/BEGIN_{_print_RS;_RS="|";_print_RS_}__{_print_}
=== RUN   TestInterp/BEGIN_{_RS="";_FS="\n"_}__{_printf_"%d_(%d):\n",_NR,_NF;_for_(i=1;_i<=
=== RUN   TestInterp/BEGIN_{_RS="";_FS="\n"_}__{_printf_"%d_(%d):\n",_NR,_NF;_for_(i=1;_i<=#01
=== RUN   TestInterp/BEGIN_{_RS="";_FS="\n"_}__{_printf_"%d_(%d):\n",_NR,_NF;_for_(i=1;_i<=#02
=== RUN   TestInterp/BEGIN_{_RS="";_FS="\n"_}__{_printf_"%d_(%d):\n",_NR,_NF;_for_(i=1;_i<=#03
=== RUN   TestInterp/BEGIN_{_RS="";_FS="\n"_}__{_printf_"%d_(%d):\n",_NR,_NF;_for_(i=1;_i<=#04
=== RUN   TestInterp/BEGIN_{_RS="";_FS="X"_}__{_printf_"%d_(%d):\n",_NR,_NF;_for_(i=1;_i<=N
=== RUN   TestInterp/BEGIN_{_RS_=_""_}__{_print_"got",_$0_}
=== RUN   TestInterp/BEGIN_{_RS="\n"_}__{_print_}
=== RUN   TestInterp/BEGIN_{_RS="ö"_}__{_print_}__#_!windows-gawk
=== RUN   TestInterp/BEGIN_{_RS="\\.+"_}__{_print_}
=== RUN   TestInterp/BEGIN_{_RS_=_"\n|(_*[[:upper:]]+_*)"_}_{_print_"Record_=",_$0,"and_RT_
=== RUN   TestInterp/BEGIN_{_RS_=_"\n|(_*[[:upper:]]+_*)"_}_{_print_"Record_=",_$0,"and_RT_#01
=== RUN   TestInterp/BEGIN_{_RS=".."_}_{_print_$0_RT_}
=== RUN   TestInterp/_BEGIN_{__print_SUBSEP__a[1,_2]_=_"onetwo"__print_a[1,_2]__for_(k_in_a
    interp_test.go:811: panic compiling bytecode: TODO multi indexes not yet supported
=== RUN   TestInterp/{_print_NF;_NF=1;_$2="two";_print_$0,_NF_}
=== RUN   TestInterp/{_print_NF;_NF=2;_$2="two";_print_$0,_NF}
=== RUN   TestInterp/{_print_NF;_NF=3;_$2="two";_print_$0,_NF}
=== RUN   TestInterp/{_print;_print_$1,_$3,_$NF_}
=== RUN   TestInterp/{_print_$1,$3;_$2="x";_print;_print_$2_}
=== RUN   TestInterp/{_print;_$0="x_y_z";_print;_print_$1,_$3_}
=== RUN   TestInterp/{_print_$1^2_}
=== RUN   TestInterp/{_print_$-1_}
=== RUN   TestInterp/{_NF=-1;_}__#_!awk_-_awk_allows_setting_negative_NF
=== RUN   TestInterp/{_NF=1234567;_}
=== RUN   TestInterp/BEGIN_{_$1234567=1_}
=== RUN   TestInterp/0_in_FS__#_!awk_-_doesn't_flag_this_as_an_error
=== RUN   TestInterp/{_NF=1;_$1="x";_print_$0;_print_NF_}
=== RUN   TestInterp/{_NF=1;_$1="x";_print_$0;_print_NF_}#01
=== RUN   TestInterp/{_NF=1;_$1="x";_print_$0;_print_NF_}#02
=== RUN   TestInterp/{_NF=1;_$2="x";_print_$0;_print_NF_}
=== RUN   TestInterp/{_NF=1;_$2="x";_print_$0;_print_NF_}#01
=== RUN   TestInterp/{_NF=1;_$2="x";_print_$0;_print_NF_}#02
=== RUN   TestInterp/{_NF=1;_$3="x";_print_$0;_print_NF_}
=== RUN   TestInterp/{_NF=1;_$3="x";_print_$0;_print_NF_}__#_!awk_-_awk_differs_from_gawk_(
=== RUN   TestInterp/{_NF=1;_$3="x";_print_$0;_print_NF_}__#_!awk_-_awk_differs_from_gawk_(#01
=== RUN   TestInterp/{_NF=2;_$1="x";_print_$0;_print_NF_}
=== RUN   TestInterp/{_NF=2;_$1="x";_print_$0;_print_NF_}#01
=== RUN   TestInterp/{_NF=2;_$1="x";_print_$0;_print_NF_}#02
=== RUN   TestInterp/{_NF=2;_$2="x";_print_$0;_print_NF_}
=== RUN   TestInterp/{_NF=2;_$2="x";_print_$0;_print_NF_}#01
=== RUN   TestInterp/{_NF=2;_$2="x";_print_$0;_print_NF_}#02
=== RUN   TestInterp/{_NF=2;_$3="x";_print_$0;_print_NF_}
=== RUN   TestInterp/{_NF=2;_$3="x";_print_$0;_print_NF_}#01
=== RUN   TestInterp/{_NF=2;_$3="x";_print_$0;_print_NF_}#02
=== RUN   TestInterp/{_NF=3;_$1="x";_print_$0;_print_NF_}__#_!awk_-_segmentation_fault
=== RUN   TestInterp/{_NF=3;_$1="x";_print_$0;_print_NF_}__#_!awk_-_segmentation_fault#01
=== RUN   TestInterp/{_NF=3;_$1="x";_print_$0;_print_NF_}
=== RUN   TestInterp/{_NF=3;_$2="x";_print_$0;_print_NF_}__#_!awk_-_segmentation_fault
=== RUN   TestInterp/{_NF=3;_$2="x";_print_$0;_print_NF_}__#_!awk_-_segmentation_fault#01
=== RUN   TestInterp/{_NF=3;_$2="x";_print_$0;_print_NF_}
=== RUN   TestInterp/{_NF=3;_$3="x";_print_$0;_print_NF_}
=== RUN   TestInterp/{_NF=3;_$3="x";_print_$0;_print_NF_}#01
=== RUN   TestInterp/{_NF=3;_$3="x";_print_$0;_print_NF_}#02
=== RUN   TestInterp/BEGIN_{_print_x;_x_=_4;_print_x;_}
=== RUN   TestInterp/BEGIN_{_a["foo"]=1;_b[2]="x";_k="foo";_print_a[k],_b["2"]_}
=== RUN   TestInterp/BEGIN_{_s+=5;_print_s;_s-=2;_print_s;_s-=s;_print_s_}
=== RUN   TestInterp/BEGIN_{_x=2;_x*=x;_print_x;_x*=3;_print_x_}
=== RUN   TestInterp/BEGIN_{_x=6;_x/=3;_print_x;_x/=x;_print_x;_x/=.6;_print_x_}
=== RUN   TestInterp/BEGIN_{_x=12;_x%=5;_print_x_}
=== RUN   TestInterp/BEGIN_{_x=2;_x^=5;_print_x;_x^=0.5;_print_x_}
=== RUN   TestInterp/{_$2+=10;_print;_$3/=2;_print_}
=== RUN   TestInterp/BEGIN_{_a[2]_+=_1;_a["2"]_*=_3;_print_a[2]_}
=== RUN   TestInterp/BEGIN_{_print_x++;_print_x_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.IncrExpr
=== RUN   TestInterp/BEGIN_{_print_x;_print_x++;_print_++x;_print_x_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.IncrExpr
=== RUN   TestInterp/BEGIN_{_print_x;_print_x--;_print_--x;_print_x_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.IncrExpr
=== RUN   TestInterp/BEGIN_{_s++;_s++;_print_s_}
=== RUN   TestInterp/BEGIN_{_y="_";_--x[y_=_y_y];_print_length(y)_}
=== RUN   TestInterp/BEGIN_{_x[y++]++;_print_y_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.IncrExpr
=== RUN   TestInterp/BEGIN_{_x[y++]_+=_3;_print_y_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.IncrExpr
=== RUN   TestInterp/BEGIN_{_$(y++)++;_print_y_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.IncrExpr
=== RUN   TestInterp/BEGIN_{_print_"s"_++n;_print_"s"_--n_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.IncrExpr
=== RUN   TestInterp/BEGIN_{_print_sin(0),_sin(0.5),_sin(1),_sin(-1)_}
=== RUN   TestInterp/BEGIN_{_print_cos(0),_cos(0.5),_cos(1),_cos(-1)_}
=== RUN   TestInterp/BEGIN_{_print_exp(0),_exp(0.5),_exp(1),_exp(-1)_}
=== RUN   TestInterp/BEGIN_{_print_log(0),_log(0.5),_log(1)_}
=== RUN   TestInterp/BEGIN_{_print_log(-1)_}__#_!gawk_-_gawk_prints_warning_for_this_as_wel
=== RUN   TestInterp/BEGIN_{_print_sqrt(0),_sqrt(2),_sqrt(4)_}
=== RUN   TestInterp/BEGIN_{_print_int(3.5),_int("1.9"),_int(4),_int(-3.6),_int("x"),_int("
=== RUN   TestInterp/BEGIN_{_print_match("food",_"foo"),_RSTART,_RLENGTH_}
=== RUN   TestInterp/BEGIN_{_print_match("x_food_y",_"fo"),_RSTART,_RLENGTH_}
=== RUN   TestInterp/BEGIN_{_print_match("x_food_y",_"fox"),_RSTART,_RLENGTH_}
=== RUN   TestInterp/BEGIN_{_print_match("x_food_y",_/[fod]+/),_RSTART,_RLENGTH_}
=== RUN   TestInterp/BEGIN_{_print_match("絵_fööd_y",_/[föd]+/),_RSTART,_RLENGTH_}
=== RUN   TestInterp/{_print_length,_length(),_length("buzz"),_length("")_}
=== RUN   TestInterp/BEGIN_{_print_length("a"),_length("絵")_}__#_!awk
=== RUN   TestInterp/BEGIN_{_print_index("foo",_"f"),_index("foo0",_0),_index("foo",_"o"),_
=== RUN   TestInterp/BEGIN_{_print_index("föö",_"f"),_index("föö0",_0),_index("föö",_
=== RUN   TestInterp/BEGIN_{_print_atan2(1,_0.5),_atan2(-1,_0)_}
=== RUN   TestInterp/BEGIN_{_print_sprintf("%3d",_42)_}
=== RUN   TestInterp/BEGIN_{_print_sprintf("%d",_12,_34)_}
=== RUN   TestInterp/BEGIN_{_print_sprintf("%d")_}
=== RUN   TestInterp/BEGIN_{_print_sprintf("%d",_12,_34)_}#01
=== RUN   TestInterp/BEGIN_{_print_sprintf("%_5d",_42)_}
=== RUN   TestInterp/BEGIN_{_print_substr("food",_1),_substr("fööd",_1)_}__#_!windows-gaw
=== RUN   TestInterp/BEGIN_{_print_substr("food",_1,_2),_substr("fööd",_1,_2)_}__#_!windo
=== RUN   TestInterp/BEGIN_{_print_substr("food",_1,_4),_substr("fööd",_1,_4)_}__#_!windo
=== RUN   TestInterp/BEGIN_{_print_substr("food",_1,_8),_substr("fööd",_1,_8)_}__#_!windo
=== RUN   TestInterp/BEGIN_{_print_substr("food",_2),_substr("fööd",_2)_}__#_!windows-gaw
=== RUN   TestInterp/BEGIN_{_print_substr("food",_2,_2),_substr("fööd",_2,_2)_}__#_!windo
=== RUN   TestInterp/BEGIN_{_print_substr("food",_2,_3),_substr("fööd",_2,_3)_}__#_!windo
=== RUN   TestInterp/BEGIN_{_print_substr("food",_2,_8),_substr("fööd",_2,_8)_}__#_!windo
=== RUN   TestInterp/BEGIN_{_print_substr("food",_0,_8),_substr("fööd",_0,_8)_}__#_!windo
=== RUN   TestInterp/BEGIN_{_print_substr("food",_-1,_8),_substr("fööd",_-1,_8)_}__#_!win
=== RUN   TestInterp/BEGIN_{_print_substr("food",_5,_8),_substr("fööd",_5,_8)_}
=== RUN   TestInterp/BEGIN_{_print_substr("food",_2,_-3),_substr("fööd",_2,_-3)_}
=== RUN   TestInterp/BEGIN_{_n_=_split("ab_c_d_",_a);_for_(i=1;_i<=n;_i++)_print_a[i]_}
=== RUN   TestInterp/BEGIN_{_n_=_split("ab,c,d,",_a,_",");_for_(i=1;_i<=n;_i++)_print_a[i]_
=== RUN   TestInterp/BEGIN_{_n_=_split("ab,c.d,",_a,_/[,.]/);_for_(i=1;_i<=n;_i++)_print_a[
=== RUN   TestInterp/BEGIN_{_n_=_split("1_2",_a);_print_(n,_a[1],_a[2],_a[1]==1,_a[2]==2)_}
=== RUN   TestInterp/BEGIN_{_x_=_"1.2.3";_print_sub(/\./,_",",_x);_print_x_}
    interp_test.go:811: panic compiling bytecode: TODO: func sub not yet supported
=== RUN   TestInterp/{_print_sub(/\./,_",");_print_$0_}
    interp_test.go:811: panic compiling bytecode: TODO: func sub not yet supported
=== RUN   TestInterp/BEGIN_{_x_=_"1.2.3";_print_gsub(/\./,_",",_x);_print_x_}
    interp_test.go:811: panic compiling bytecode: TODO: func gsub not yet supported
=== RUN   TestInterp/{_print_gsub(/\./,_",");_print_$0_}
    interp_test.go:811: panic compiling bytecode: TODO: func gsub not yet supported
=== RUN   TestInterp/{_print_gsub(/[0-9]/,_"(&)");_print_$0_}
    interp_test.go:811: panic compiling bytecode: TODO: func gsub not yet supported
=== RUN   TestInterp/{_print_gsub(/[0-9]+/,_"(&)");_print_$0_}
    interp_test.go:811: panic compiling bytecode: TODO: func gsub not yet supported
=== RUN   TestInterp/{_print_gsub(/[0-9]/,_"\\&");_print_$0_}
    interp_test.go:811: panic compiling bytecode: TODO: func gsub not yet supported
=== RUN   TestInterp/{_print_gsub(/[0-9]/,_"\\z");_print_$0_}
    interp_test.go:811: panic compiling bytecode: TODO: func gsub not yet supported
=== RUN   TestInterp/{_print_gsub("0",_"x\\\\y");_print_$0_}__#_!awk_!gawk_--_our_behaviour
    interp_test.go:811: panic compiling bytecode: TODO: func gsub not yet supported
=== RUN   TestInterp/sub("",_"\\e",_FS)__#_!awk_!gawk
=== RUN   TestInterp/BEGIN_{_print_tolower("Foo_BaR")_}
=== RUN   TestInterp/BEGIN_{_print_toupper("Foo_BaR")_}
=== RUN   TestInterp/_BEGIN_{__srand(1)__a_=_rand();_b_=_rand();_c_=_rand()__srand(1)__x_=_
=== RUN   TestInterp/_BEGIN_{__for_(i_=_0;_i_<_1000;_i++)_{___if_(rand()_<_0.5)_n++__}__pri
=== RUN   TestInterp/BEGIN_{_print_system("echo_foo");_print_system("echo_bar")_}__#_!fuzz
=== RUN   TestInterp/BEGIN_{_print_system(">&2_echo_error")_}__#_!fuzz
=== RUN   TestInterp/BEGIN_{_print_0?"t":"f"_}
=== RUN   TestInterp/BEGIN_{_print_1?"t":"f"_}
=== RUN   TestInterp/BEGIN_{_print_(1+2)?"t":"f"_}
=== RUN   TestInterp/BEGIN_{_print_(1+2?"t":"f")_}
=== RUN   TestInterp/BEGIN_{_print(1_?_x="t"_:_"f");_print_x;_}
=== RUN   TestInterp/_function_f(loc)_{__glob_+=_1__loc_+=_1__print_glob,_loc_}_BEGIN_{__gl
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestInterp/_function_set(a,_x,_v)_{__a[x]_=_v_}_function_get(a,_x)_{__return_a[x]
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestInterp/_function_fib(n)_{__return_n_<_3_?_1_:_fib(n-2)_+_fib(n-1)_}_BEGIN_{__
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestInterp/_function_f(a,_x)_{_return_a[x]_}_function_g(b,_y)_{_f(b,_y)_}_BEGIN_{
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestInterp/_function_g(b,_y)_{_return_f(b,_y)_}_function_f(a,_x)_{_return_a[x]_}_
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestInterp/_function_h(b,_y)_{_g(b,_y)_}_function_g(b,_y)_{_f(b,_y)_}_function_f(
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestInterp/_function_h(b,_y)_{_return_g(b,_y)_}_function_g(b,_y)_{_return_f(b,_y)
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestInterp/_function_get(a,_x)_{_return_a[x]_}_BEGIN_{_a[1]=2;_print_get(a,_x);_p
=== RUN   TestInterp/_function_early()_{__print_"x"__return__print_"y"_}_BEGIN_{_early()_}_
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestInterp/BEGIN_{_return_}
=== RUN   TestInterp/function_f()_{_printf_"x"_};_BEGIN_{_f()_}_
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestInterp/BEGIN_{_arr[0];_f(arr)_}_function_f(a)_{_printf_"x"_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestInterp/function_f(x)_{_0_in__;_f(_)_}__BEGIN_{_f()_}__#_!awk_!gawk
=== RUN   TestInterp/BEGIN_{_for_(i=0;_i<1001;_i++)_f();_print_x_}__function_f()_{_x++_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestInterp/_function_bar(y)_{_return_y[1]_}_function_foo()_{_return_bar(x)_}_BEGI
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestInterp/_function_f1(x)_{_}_function_f2(x,_y)_{_return_x[y]_}_BEGIN_{_a[1]=2;_
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestInterp/BEGIN_{_arr[0];_f(arr)_}_function_f(a)_{_print_"x"_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestInterp/BEGIN_{_a[x];_a=42_}
=== RUN   TestInterp/BEGIN_{_s=42;_s[x]_}
=== RUN   TestInterp/function_get(a,_k)_{_return_a[k]_}__BEGIN_{_a_=_42;_print_get(a,_1);_}
=== RUN   TestInterp/function_get(a,_k)_{_return_a+k_}_BEGIN_{_a[42];_print_get(a,_1);_}
=== RUN   TestInterp/{_f(z)_}__function_f(x)_{_print_NR_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestInterp/function_f()_{_f()_}__BEGIN_{_f()_}__#_!awk_!gawk
=== RUN   TestInterp/function_f(x)_{_0_in_x_}__BEGIN_{_f(FS)_}__#_!awk
=== RUN   TestInterp/_function_foo(x)_{_print_"foo",_x_}_function_bar(foo)_{_print_"bar",_f
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestInterp/_function_foo(foo)_{_print_"foo",_foo_}_function_bar(foo)_{_print_"bar
=== RUN   TestInterp/function_foo()_{_print_foo_}__BEGIN_{_foo()_}
=== RUN   TestInterp/function_f(x)_{_print_x,_x();_}__BEGIN_{_f()_}
=== RUN   TestInterp/BEGIN_{_getline_a[1];_print_a[1]_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.GetlineExpr
=== RUN   TestInterp/BEGIN_{_getline_$1;_print_$1_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.GetlineExpr
=== RUN   TestInterp/BEGIN_{_"echo_foo"_|_getline_a[1];_print_a[1]_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.GetlineExpr
=== RUN   TestInterp/BEGIN_{_"echo_foo"_|_getline_$1;_print_$1_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.GetlineExpr
=== RUN   TestInterp/BEGIN_{_print_"foo"_|"sort";_print_"bar"_|"sort"_}__#_!fuzz
=== RUN   TestInterp/BEGIN_{_print_"foo"_|">&2_echo_error"_}__#_!gawk_!fuzz
=== RUN   TestInterp/BEGIN_{_"cat"_|_getline;_print_}__#_!fuzz
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.GetlineExpr
=== RUN   TestInterp/BEGIN_{_print_getline_x_<_"/no/such/file"_}__#_!fuzz
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.GetlineExpr
=== RUN   TestInterp/BEGIN_{_print_getline_"z";_print_$0_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.GetlineExpr
=== RUN   TestInterp/BEGIN_{_print_getline_x+1;_print_x_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.GetlineExpr
=== RUN   TestInterp/BEGIN_{_print_getline_(x+1);_print_$0_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.GetlineExpr
=== RUN   TestInterp/BEGIN_{_print_getline_foo();_print_$0_}_function_foo()_{_print_"z"_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.GetlineExpr
=== RUN   TestInterp/BEGIN_{_getline;_print($0==0)_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.GetlineExpr
=== RUN   TestInterp/BEGIN_{_getline_x;_print(x==0)_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.GetlineExpr
=== RUN   TestInterp/BEGIN_{_"echo_0.0"_|_getline;_print($0==0)_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.GetlineExpr
=== RUN   TestInterp/BEGIN_{_"echo_0.0"_|_getline_x;_print(x==0)_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.GetlineExpr
=== RUN   TestInterp/BEGIN_{_print_>"out";_getline_<"out"_}__#_!awk_!gawk
=== RUN   TestInterp/BEGIN_{_print_|"out";_getline_<"out"_}__#_!awk_!gawk
=== RUN   TestInterp/BEGIN_{_print_>"out";_close("out");_getline_<"out";_print_>"out"_}__#_
=== RUN   TestInterp/BEGIN_{_print_>"out";_close("out");_getline_<"out";_print_|"out"_}__#_
=== RUN   TestInterp/BEGIN_{_print_getline_x_<_"-";_print_x_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.GetlineExpr
=== RUN   TestInterp/{_print_$0;_print_getline_x_<"-";_print_x_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.GetlineExpr
=== RUN   TestInterp/BEGIN_{_print_"x"_>"-";_print_"y"_>"-"_}
=== RUN   TestInterp/BEGIN_{_print_fflush();_print_fflush("")_}
=== RUN   TestInterp/BEGIN_{_print_"x";_print_fflush();_print_"y";_print_fflush("")_}
=== RUN   TestInterp/BEGIN_{_print_"x"_>"out";_print_fflush("out");_print_"y";_print_fflush
=== RUN   TestInterp/BEGIN_{_print_fflush("x")_}__#_!gawk
=== RUN   TestInterp/BEGIN_{_"cat"_|_getline;_print_fflush("cat")_}__#_!gawk_!fuzz
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.GetlineExpr
=== RUN   TestInterp/BEGIN_{_print_"x"_>_"out"_}__#_!fuzz
=== RUN   TestInterp/BEGIN_{_printf_"x"_>_"out"_}__#_!fuzz
=== RUN   TestInterp/BEGIN_{_print("x"_>_"out")_}
=== RUN   TestInterp/BEGIN_{_printf("x"_>_"out")_}
=== RUN   TestInterp/BEGIN_{_if_(1)_printf_"x";_else_printf_"y"_}
=== RUN   TestInterp/BEGIN_{_printf_"x";_{_printf_"y";_printf_"z"_}_}
=== RUN   TestInterp/{_$1_=_substr($1,_1,_3)_print_$1_}
=== RUN   TestInterp/BEGIN_{_f()_}
=== RUN   TestInterp/function_f()_{}_function_f()_{}_BEGIN_{_}
=== RUN   TestInterp/BEGIN_{_print_(1,2),(3,4)_}
=== RUN   TestInterp/BEGIN_{_print_(1,2,(3,4),(5,6))_}
=== RUN   TestInterp/{_print_length()_}
--- FAIL: TestInterp (0.06s)
    --- PASS: TestInterp/BEGIN_{_print_"b"_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_"b"_}#01 (0.00s)
    --- PASS: TestInterp/END_{_print_"e"_} (0.00s)
    --- PASS: TestInterp/END_{_print_"e"_}#01 (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_"b"}_END_{_print_"e"_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_"b"}_END_{_print_"e"_}#01 (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_"b"}_$0_{_print_NR_}_END_{_print_"e"_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_printf_"x"_};_BEGIN_{_printf_"y"_} (0.00s)
    --- PASS: TestInterp/$0 (0.00s)
    --- PASS: TestInterp/{_print_$0_} (0.00s)
    --- PASS: TestInterp/$1=="foo" (0.00s)
    --- PASS: TestInterp/$1==42 (0.00s)
    --- PASS: TestInterp/$1=="42" (0.00s)
    --- PASS: TestInterp//foo/ (0.00s)
    --- PASS: TestInterp/NR==2,_NR==4 (0.00s)
    --- PASS: TestInterp/_NR==2,_NR==4_{_print_$0_}_NR==3,_NR==5_{_print_NR_}_ (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_"x",_"y"_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_OFS;_OFS_=_",";_print_"x",_"y"_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_ORS;_ORS_=_".";_print_"x",_"y"_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_ORS;_ORS_=_"";_print_"x",_"y"_} (0.00s)
    --- PASS: TestInterp/{_print;_print_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print;_print_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_printf_"%%_%d_%x_%c_%f_%s",_42,_42,_42,_42,_42_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_printf_"%3d",_42_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_printf_"%3s",_"x"_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_printf_"%.1g",_42_}__#_!windows-gawk (0.00s)
    --- PASS: TestInterp/BEGIN_{_printf_"%d",_12,_34_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_printf_"%d"_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_printf_"%c",_0_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_printf_"%c",_127_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_printf_"%c",_128_}__#_!gawk (0.00s)
    --- PASS: TestInterp/BEGIN_{_printf_"%c",_255_}__#_!gawk (0.00s)
    --- PASS: TestInterp/BEGIN_{_printf_"%c",_256_}__#_!awk_!gawk (0.00s)
    --- PASS: TestInterp/BEGIN_{_printf_"%c",_"xyz"_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_printf_"%c",_""_}__#_!awk (0.00s)
    --- PASS: TestInterp/BEGIN_{_printf_}__#_!awk_-_doesn't_error_on_this (0.00s)
    --- PASS: TestInterp/BEGIN_{_printf("%%%dd",_4)_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_if_(1)_print_"t";_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_if_(0)_print_"t";_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_if_(1)_print_"t";_else_print_"f"_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_if_(0)_print_"t";_else_print_"f"_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_for_(;;)_{_print_"x";_break_}_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_for_(;;)_{_printf_"%d_",_i;_i++;_if_(i>2)_break;_}_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_for_(i=5;_;_)_{_printf_"%d_",_i;_i++;_if_(i>8)_break;_}_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_for_(i=5;_;_i++)_{_printf_"%d_",_i;_if_(i>8)_break;_}_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_for_(i=5;_i<8;_i++)_{_printf_"%d_",_i_}_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_for_(i=0;_i<10;_i++)_{_if_(i_<_5)_continue;_printf_"%d_",_i_}_ (0.00s)
    --- PASS: TestInterp/BEGIN_{_a[1]=1;_a[2]=1;_for_(k_in_a)_{_s++;_break_}_print_s_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_a[1]=1;_a[2]=1;_a[3]=1;_for_(k_in_a)_{_if_(k==2)_continue;_s++ (0.00s)
    --- PASS: TestInterp/BEGIN_{_while_(i<3)_{_i++;_s++;_break_}_print_s_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_while_(i<3)_{_i++;_if_(i==2)_continue;_s++_}_print_s_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_do_{_i++;_s++;_break_}_while_(i<3);_print_s_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_do_{_i++;_if_(i==2)_continue;_s++_}_while_(i<3);_print_s_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_a["x"]_=_3;_a["y"]_=_4;_for_(k_in_a)_x_+=_a[k];_print_x_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_while_(i_<_5)_{_print_i;_i++_}_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_do_{_print_i;_i++_}_while_(i_<_5)_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_for_(i=0;_i<10;_i++);_printf_"x"_} (0.00s)
    --- PASS: TestInterp/_BEGIN_{__for_(i_=_0;_i_<_1;_i++)_{___for_(j_=_0;_j_<_1;_j++)_{____pri (0.00s)
    --- PASS: TestInterp/_BEGIN_{__for_(i_=_0;_i_<_1;_i++)_{___for_(j_=_0;_j_<_1;_j++)_{____pri#01 (0.00s)
    --- PASS: TestInterp/{_if_(NR==2)_next;_print_} (0.00s)
    --- FAIL: TestInterp/{_if_(NR==2)_f();_print_}__function_f()_{_next_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_next_} (0.00s)
    --- PASS: TestInterp/END_{_next_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_a["x"]_=_3;_print_"x"_in_a,_"y"_in_a_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_a["x"]_=_3;_a["y"]_=_4;_delete_a["x"];_for_(k_in_a)_print_k,_a (0.00s)
    --- PASS: TestInterp/BEGIN_{_a["x"]_=_3;_a["y"]_=_4;_for_(k_in_a)_delete_a[k];_for_(k_in_a) (0.00s)
    --- PASS: TestInterp/BEGIN_{_a["x"];_"y"_in_a;_for_(k_in_a)_print_k,_a[k]_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_a[]_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_delete_a[]_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_a["x"]_=_3;_a["y"]_=_4;_delete_a;_for_(k_in_a)_print_k,_a[k]_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_!42,_!1,_!0,_!!42,_!!1,_!!0_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_!42,_!1,_!0,_!!42,_!!1,_!!0_}#01 (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_+4,_+"3",_+0,_+-3,_-3,_-_-4,_-"3"_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_$0="0";_print_!$0_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_$0="1";_print_!$0_} (0.00s)
    --- PASS: TestInterp/{_print_!$0_} (0.00s)
    --- PASS: TestInterp/{_print_!$0_}#01 (0.00s)
    --- FAIL: TestInterp/!seen[$0]++ (0.00s)
    --- FAIL: TestInterp/!seen[$0]-- (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_(1==1,_1==0,_"1"==1,_"1"==1.0)_} (0.00s)
    --- PASS: TestInterp/{_print_($0=="1",_$0==1)_} (0.00s)
    --- PASS: TestInterp/{_print_($1=="1",_$1==1)_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_(1!=1,_1!=0,_"1"!=1,_"1"!=1.0)_} (0.00s)
    --- PASS: TestInterp/{_print_($0!="1",_$0!=1)_} (0.00s)
    --- PASS: TestInterp/{_print_($1!="1",_$1!=1)_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_(0<1,_1<1,_2<1,_"12"<"2")_} (0.00s)
    --- PASS: TestInterp/{_print_($1<2)_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_(0<=1,_1<=1,_2<=1,_"12"<="2")_} (0.00s)
    --- PASS: TestInterp/{_print_($1<=2)_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_(0>1,_1>1,_2>1,_"12">"2")_} (0.00s)
    --- PASS: TestInterp/{_print_($1>2)_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_(0>=1,_1>=1,_2>=1,_"12">="2")_} (0.00s)
    --- PASS: TestInterp/{_print_($1>=2)_} (0.00s)
    --- PASS: TestInterp/{_print($0<2)_} (0.00s)
    --- PASS: TestInterp/{_print($1<2)_} (0.00s)
    --- PASS: TestInterp/{_print($1<2)_}#01 (0.00s)
    --- PASS: TestInterp/BEGIN_{_$0="10";_print($0<2)_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_$1="10";_print($1<2)_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_$1="10x";_print($1<2)_} (0.00s)
    --- FAIL: TestInterp/_function_t()_{_print_"t";_return_2_}_function_f()_{_print_"f";_return (0.00s)
    --- FAIL: TestInterp/_function_t()_{_print_"t";_return_2_}_function_f()_{_print_"f";_return#01 (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_0&&0,_0&&2,_2&&0,_2&&2_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_0||0,_0||2,_2||0,_2||2_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_1+2,_1+2+3,_1+-2,_-1+2,_"1"+"2",_3+.14_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_1-2,_1-2-3,_1-+2,_-1-2,_"1"-"2",_3-.14_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_2*3,_2*3*4,_2*-3,_-2*3,_"2"*"3",_3*.14_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_2/3,_2/3/4,_2/-3,_-2/3,_"2"/"3",_3/.14_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_2%3,_2%3%4,_2%-3,_-2%3,_"2"%"3",_3%.14_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_2^3,_2^3^3,_2^-3,_-2^3,_"2"^"3",_3^.14_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_1_2,_"x"_"yz",_1+2_3+4_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_"food"~/oo/,_"food"~/[oO]+d/,_"food"~"f",_"food"~"F",_"f (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_"food"!~/oo/,_"food"!~/[oO]+d/,_"food"!~"f",_"food"!~"F" (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_1+2*3/4^5%6_7,_(1+2)*3/4^5%6_"7"_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_1,_1.,_.1,_1e0,_-1,_1e_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_'\"'_'\''_'xy'_"z"_"'"_'\"'_} (0.00s)
    --- PASS: TestInterp/{_print_/foo/_} (0.00s)
    --- PASS: TestInterp//[a-/ (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_"-12"+0,_"+12"+0,_"_\t\r\n7foo"+0,_".5"+0,_"5."+0,_"+."+ (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_"1e3"+0,_"1.2e-1"+0,_"1e+1"+0,_"1e"+0,_"1e+"+0_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_-(11102200000000000000000000000000000000_1040000)_}__#_! (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_atan2(0,_8020020000000e20G-0)} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_1e1000,_-1e1000_}__#_!gawk (0.00s)
    --- PASS: TestInterp/BEGIN_{_printf_"\x0.\x00.\x0A\x10\xff\xFF\x41"_}__#_!awk (0.00s)
    --- PASS: TestInterp/BEGIN_{_printf_"\x1.\x01.\x0A\x10\xff\xFF\x41"_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_printf_"\0\78\7\77\777\0_\141_"_}__#_!awk (0.00s)
    --- PASS: TestInterp/BEGIN_{_printf_"\1\78\7\77\777\1_\141_"_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_e="x";_E="X";_print_1e,_1E_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_e="x";_E="X";_print_1e1e,_1E1E_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_a=2;_print_1e+a,_1E+a,_1e+1,_1E+1_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_a=2;_print_1e-a,_1E-a,_1e-1,_1E-1_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_1e+_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_1e-_} (0.00s)
    --- PASS: TestInterp/{_print_/x/?"t":"f"_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_1?2?3:4:5,_1?0?3:4:5,_0?2?3:4:5_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_$0="0";_print_($0?1:0)_} (0.00s)
    --- PASS: TestInterp/{_print_$0?1:0_} (0.00s)
    --- PASS: TestInterp/{_print_$0?1:0_}#01 (0.00s)
    --- PASS: TestInterp/BEGIN_{_$0="1";_print_($0?1:0)_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_0?1:0,_1?1:0,_""?1:0,_"0"?1:0,_"1"?1:0,_x?1:0_} (0.00s)
    --- PASS: TestInterp/_BEGIN_{__print_CONVFMT,_1.2345678_""__CONVFMT_=_"%.3g"__print_CONVFMT (0.00s)
    --- PASS: TestInterp/BEGIN_{_FILENAME_=_"foo";_print_FILENAME_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_FILENAME_=_"123.0";_print_(FILENAME==123)_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_FNR_=_123;_print_FNR_} (0.00s)
    --- PASS: TestInterp/{_print_FNR,_$0_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_"|"_FS_"|";_FS=","_}_{_print_$1,_$2_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_"|"_FS_"|";_FS="\\."_}_{_print_$1,_$2_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_FS="\\"_}_{_print_$1,_$2_} (0.00s)
    --- PASS: TestInterp/{_print_NF_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_NR_=_123;_print_NR_} (0.00s)
    --- PASS: TestInterp/{_print_NR,_$0_} (0.00s)
    --- PASS: TestInterp/_BEGIN_{__print_OFMT,_1.2345678__OFMT_=_"%.3g"__print_OFMT,_1.234567_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_RSTART,_RLENGTH;_RSTART=5;_RLENGTH=42;_print_RSTART,_RLE (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_RS_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_RS;_RS="|";_print_RS_}__{_print_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_RS="";_FS="\n"_}__{_printf_"%d_(%d):\n",_NR,_NF;_for_(i=1;_i<= (0.00s)
    --- PASS: TestInterp/BEGIN_{_RS="";_FS="\n"_}__{_printf_"%d_(%d):\n",_NR,_NF;_for_(i=1;_i<=#01 (0.00s)
    --- PASS: TestInterp/BEGIN_{_RS="";_FS="\n"_}__{_printf_"%d_(%d):\n",_NR,_NF;_for_(i=1;_i<=#02 (0.00s)
    --- PASS: TestInterp/BEGIN_{_RS="";_FS="\n"_}__{_printf_"%d_(%d):\n",_NR,_NF;_for_(i=1;_i<=#03 (0.00s)
    --- PASS: TestInterp/BEGIN_{_RS="";_FS="\n"_}__{_printf_"%d_(%d):\n",_NR,_NF;_for_(i=1;_i<=#04 (0.00s)
    --- PASS: TestInterp/BEGIN_{_RS="";_FS="X"_}__{_printf_"%d_(%d):\n",_NR,_NF;_for_(i=1;_i<=N (0.00s)
    --- PASS: TestInterp/BEGIN_{_RS_=_""_}__{_print_"got",_$0_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_RS="\n"_}__{_print_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_RS="ö"_}__{_print_}__#_!windows-gawk (0.00s)
    --- PASS: TestInterp/BEGIN_{_RS="\\.+"_}__{_print_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_RS_=_"\n|(_*[[:upper:]]+_*)"_}_{_print_"Record_=",_$0,"and_RT_ (0.00s)
    --- PASS: TestInterp/BEGIN_{_RS_=_"\n|(_*[[:upper:]]+_*)"_}_{_print_"Record_=",_$0,"and_RT_#01 (0.00s)
    --- PASS: TestInterp/BEGIN_{_RS=".."_}_{_print_$0_RT_} (0.00s)
    --- FAIL: TestInterp/_BEGIN_{__print_SUBSEP__a[1,_2]_=_"onetwo"__print_a[1,_2]__for_(k_in_a (0.00s)
    --- PASS: TestInterp/{_print_NF;_NF=1;_$2="two";_print_$0,_NF_} (0.00s)
    --- PASS: TestInterp/{_print_NF;_NF=2;_$2="two";_print_$0,_NF} (0.00s)
    --- PASS: TestInterp/{_print_NF;_NF=3;_$2="two";_print_$0,_NF} (0.00s)
    --- PASS: TestInterp/{_print;_print_$1,_$3,_$NF_} (0.00s)
    --- PASS: TestInterp/{_print_$1,$3;_$2="x";_print;_print_$2_} (0.00s)
    --- PASS: TestInterp/{_print;_$0="x_y_z";_print;_print_$1,_$3_} (0.00s)
    --- PASS: TestInterp/{_print_$1^2_} (0.00s)
    --- PASS: TestInterp/{_print_$-1_} (0.00s)
    --- PASS: TestInterp/{_NF=-1;_}__#_!awk_-_awk_allows_setting_negative_NF (0.00s)
    --- PASS: TestInterp/{_NF=1234567;_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_$1234567=1_} (0.00s)
    --- PASS: TestInterp/0_in_FS__#_!awk_-_doesn't_flag_this_as_an_error (0.00s)
    --- PASS: TestInterp/{_NF=1;_$1="x";_print_$0;_print_NF_} (0.00s)
    --- PASS: TestInterp/{_NF=1;_$1="x";_print_$0;_print_NF_}#01 (0.00s)
    --- PASS: TestInterp/{_NF=1;_$1="x";_print_$0;_print_NF_}#02 (0.00s)
    --- PASS: TestInterp/{_NF=1;_$2="x";_print_$0;_print_NF_} (0.00s)
    --- PASS: TestInterp/{_NF=1;_$2="x";_print_$0;_print_NF_}#01 (0.00s)
    --- PASS: TestInterp/{_NF=1;_$2="x";_print_$0;_print_NF_}#02 (0.00s)
    --- PASS: TestInterp/{_NF=1;_$3="x";_print_$0;_print_NF_} (0.00s)
    --- PASS: TestInterp/{_NF=1;_$3="x";_print_$0;_print_NF_}__#_!awk_-_awk_differs_from_gawk_( (0.00s)
    --- PASS: TestInterp/{_NF=1;_$3="x";_print_$0;_print_NF_}__#_!awk_-_awk_differs_from_gawk_(#01 (0.00s)
    --- PASS: TestInterp/{_NF=2;_$1="x";_print_$0;_print_NF_} (0.00s)
    --- PASS: TestInterp/{_NF=2;_$1="x";_print_$0;_print_NF_}#01 (0.00s)
    --- PASS: TestInterp/{_NF=2;_$1="x";_print_$0;_print_NF_}#02 (0.00s)
    --- PASS: TestInterp/{_NF=2;_$2="x";_print_$0;_print_NF_} (0.00s)
    --- PASS: TestInterp/{_NF=2;_$2="x";_print_$0;_print_NF_}#01 (0.00s)
    --- PASS: TestInterp/{_NF=2;_$2="x";_print_$0;_print_NF_}#02 (0.00s)
    --- PASS: TestInterp/{_NF=2;_$3="x";_print_$0;_print_NF_} (0.00s)
    --- PASS: TestInterp/{_NF=2;_$3="x";_print_$0;_print_NF_}#01 (0.00s)
    --- PASS: TestInterp/{_NF=2;_$3="x";_print_$0;_print_NF_}#02 (0.00s)
    --- PASS: TestInterp/{_NF=3;_$1="x";_print_$0;_print_NF_}__#_!awk_-_segmentation_fault (0.00s)
    --- PASS: TestInterp/{_NF=3;_$1="x";_print_$0;_print_NF_}__#_!awk_-_segmentation_fault#01 (0.00s)
    --- PASS: TestInterp/{_NF=3;_$1="x";_print_$0;_print_NF_} (0.00s)
    --- PASS: TestInterp/{_NF=3;_$2="x";_print_$0;_print_NF_}__#_!awk_-_segmentation_fault (0.00s)
    --- PASS: TestInterp/{_NF=3;_$2="x";_print_$0;_print_NF_}__#_!awk_-_segmentation_fault#01 (0.00s)
    --- PASS: TestInterp/{_NF=3;_$2="x";_print_$0;_print_NF_} (0.00s)
    --- PASS: TestInterp/{_NF=3;_$3="x";_print_$0;_print_NF_} (0.00s)
    --- PASS: TestInterp/{_NF=3;_$3="x";_print_$0;_print_NF_}#01 (0.00s)
    --- PASS: TestInterp/{_NF=3;_$3="x";_print_$0;_print_NF_}#02 (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_x;_x_=_4;_print_x;_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_a["foo"]=1;_b[2]="x";_k="foo";_print_a[k],_b["2"]_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_s+=5;_print_s;_s-=2;_print_s;_s-=s;_print_s_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_x=2;_x*=x;_print_x;_x*=3;_print_x_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_x=6;_x/=3;_print_x;_x/=x;_print_x;_x/=.6;_print_x_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_x=12;_x%=5;_print_x_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_x=2;_x^=5;_print_x;_x^=0.5;_print_x_} (0.00s)
    --- PASS: TestInterp/{_$2+=10;_print;_$3/=2;_print_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_a[2]_+=_1;_a["2"]_*=_3;_print_a[2]_} (0.00s)
    --- FAIL: TestInterp/BEGIN_{_print_x++;_print_x_} (0.00s)
    --- FAIL: TestInterp/BEGIN_{_print_x;_print_x++;_print_++x;_print_x_} (0.00s)
    --- FAIL: TestInterp/BEGIN_{_print_x;_print_x--;_print_--x;_print_x_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_s++;_s++;_print_s_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_y="_";_--x[y_=_y_y];_print_length(y)_} (0.00s)
    --- FAIL: TestInterp/BEGIN_{_x[y++]++;_print_y_} (0.00s)
    --- FAIL: TestInterp/BEGIN_{_x[y++]_+=_3;_print_y_} (0.00s)
    --- FAIL: TestInterp/BEGIN_{_$(y++)++;_print_y_} (0.00s)
    --- FAIL: TestInterp/BEGIN_{_print_"s"_++n;_print_"s"_--n_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_sin(0),_sin(0.5),_sin(1),_sin(-1)_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_cos(0),_cos(0.5),_cos(1),_cos(-1)_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_exp(0),_exp(0.5),_exp(1),_exp(-1)_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_log(0),_log(0.5),_log(1)_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_log(-1)_}__#_!gawk_-_gawk_prints_warning_for_this_as_wel (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_sqrt(0),_sqrt(2),_sqrt(4)_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_int(3.5),_int("1.9"),_int(4),_int(-3.6),_int("x"),_int(" (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_match("food",_"foo"),_RSTART,_RLENGTH_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_match("x_food_y",_"fo"),_RSTART,_RLENGTH_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_match("x_food_y",_"fox"),_RSTART,_RLENGTH_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_match("x_food_y",_/[fod]+/),_RSTART,_RLENGTH_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_match("絵_fööd_y",_/[föd]+/),_RSTART,_RLENGTH_} (0.00s)
    --- PASS: TestInterp/{_print_length,_length(),_length("buzz"),_length("")_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_length("a"),_length("絵")_}__#_!awk (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_index("foo",_"f"),_index("foo0",_0),_index("foo",_"o"),_ (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_index("föö",_"f"),_index("föö0",_0),_index("föö",_ (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_atan2(1,_0.5),_atan2(-1,_0)_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_sprintf("%3d",_42)_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_sprintf("%d",_12,_34)_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_sprintf("%d")_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_sprintf("%d",_12,_34)_}#01 (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_sprintf("%_5d",_42)_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_substr("food",_1),_substr("fööd",_1)_}__#_!windows-gaw (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_substr("food",_1,_2),_substr("fööd",_1,_2)_}__#_!windo (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_substr("food",_1,_4),_substr("fööd",_1,_4)_}__#_!windo (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_substr("food",_1,_8),_substr("fööd",_1,_8)_}__#_!windo (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_substr("food",_2),_substr("fööd",_2)_}__#_!windows-gaw (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_substr("food",_2,_2),_substr("fööd",_2,_2)_}__#_!windo (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_substr("food",_2,_3),_substr("fööd",_2,_3)_}__#_!windo (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_substr("food",_2,_8),_substr("fööd",_2,_8)_}__#_!windo (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_substr("food",_0,_8),_substr("fööd",_0,_8)_}__#_!windo (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_substr("food",_-1,_8),_substr("fööd",_-1,_8)_}__#_!win (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_substr("food",_5,_8),_substr("fööd",_5,_8)_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_substr("food",_2,_-3),_substr("fööd",_2,_-3)_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_n_=_split("ab_c_d_",_a);_for_(i=1;_i<=n;_i++)_print_a[i]_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_n_=_split("ab,c,d,",_a,_",");_for_(i=1;_i<=n;_i++)_print_a[i]_ (0.00s)
    --- PASS: TestInterp/BEGIN_{_n_=_split("ab,c.d,",_a,_/[,.]/);_for_(i=1;_i<=n;_i++)_print_a[ (0.00s)
    --- PASS: TestInterp/BEGIN_{_n_=_split("1_2",_a);_print_(n,_a[1],_a[2],_a[1]==1,_a[2]==2)_} (0.00s)
    --- FAIL: TestInterp/BEGIN_{_x_=_"1.2.3";_print_sub(/\./,_",",_x);_print_x_} (0.00s)
    --- FAIL: TestInterp/{_print_sub(/\./,_",");_print_$0_} (0.00s)
    --- FAIL: TestInterp/BEGIN_{_x_=_"1.2.3";_print_gsub(/\./,_",",_x);_print_x_} (0.00s)
    --- FAIL: TestInterp/{_print_gsub(/\./,_",");_print_$0_} (0.00s)
    --- FAIL: TestInterp/{_print_gsub(/[0-9]/,_"(&)");_print_$0_} (0.00s)
    --- FAIL: TestInterp/{_print_gsub(/[0-9]+/,_"(&)");_print_$0_} (0.00s)
    --- FAIL: TestInterp/{_print_gsub(/[0-9]/,_"\\&");_print_$0_} (0.00s)
    --- FAIL: TestInterp/{_print_gsub(/[0-9]/,_"\\z");_print_$0_} (0.00s)
    --- FAIL: TestInterp/{_print_gsub("0",_"x\\\\y");_print_$0_}__#_!awk_!gawk_--_our_behaviour (0.00s)
    --- PASS: TestInterp/sub("",_"\\e",_FS)__#_!awk_!gawk (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_tolower("Foo_BaR")_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_toupper("Foo_BaR")_} (0.00s)
    --- PASS: TestInterp/_BEGIN_{__srand(1)__a_=_rand();_b_=_rand();_c_=_rand()__srand(1)__x_=_ (0.00s)
    --- PASS: TestInterp/_BEGIN_{__for_(i_=_0;_i_<_1000;_i++)_{___if_(rand()_<_0.5)_n++__}__pri (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_system("echo_foo");_print_system("echo_bar")_}__#_!fuzz (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_system(">&2_echo_error")_}__#_!fuzz (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_0?"t":"f"_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_1?"t":"f"_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_(1+2)?"t":"f"_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_(1+2?"t":"f")_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print(1_?_x="t"_:_"f");_print_x;_} (0.00s)
    --- FAIL: TestInterp/_function_f(loc)_{__glob_+=_1__loc_+=_1__print_glob,_loc_}_BEGIN_{__gl (0.00s)
    --- FAIL: TestInterp/_function_set(a,_x,_v)_{__a[x]_=_v_}_function_get(a,_x)_{__return_a[x] (0.00s)
    --- FAIL: TestInterp/_function_fib(n)_{__return_n_<_3_?_1_:_fib(n-2)_+_fib(n-1)_}_BEGIN_{__ (0.00s)
    --- FAIL: TestInterp/_function_f(a,_x)_{_return_a[x]_}_function_g(b,_y)_{_f(b,_y)_}_BEGIN_{ (0.00s)
    --- FAIL: TestInterp/_function_g(b,_y)_{_return_f(b,_y)_}_function_f(a,_x)_{_return_a[x]_}_ (0.00s)
    --- FAIL: TestInterp/_function_h(b,_y)_{_g(b,_y)_}_function_g(b,_y)_{_f(b,_y)_}_function_f( (0.00s)
    --- FAIL: TestInterp/_function_h(b,_y)_{_return_g(b,_y)_}_function_g(b,_y)_{_return_f(b,_y) (0.00s)
    --- PASS: TestInterp/_function_get(a,_x)_{_return_a[x]_}_BEGIN_{_a[1]=2;_print_get(a,_x);_p (0.00s)
    --- FAIL: TestInterp/_function_early()_{__print_"x"__return__print_"y"_}_BEGIN_{_early()_}_ (0.00s)
    --- PASS: TestInterp/BEGIN_{_return_} (0.00s)
    --- FAIL: TestInterp/function_f()_{_printf_"x"_};_BEGIN_{_f()_}_ (0.00s)
    --- FAIL: TestInterp/BEGIN_{_arr[0];_f(arr)_}_function_f(a)_{_printf_"x"_} (0.00s)
    --- PASS: TestInterp/function_f(x)_{_0_in__;_f(_)_}__BEGIN_{_f()_}__#_!awk_!gawk (0.00s)
    --- FAIL: TestInterp/BEGIN_{_for_(i=0;_i<1001;_i++)_f();_print_x_}__function_f()_{_x++_} (0.00s)
    --- FAIL: TestInterp/_function_bar(y)_{_return_y[1]_}_function_foo()_{_return_bar(x)_}_BEGI (0.00s)
    --- FAIL: TestInterp/_function_f1(x)_{_}_function_f2(x,_y)_{_return_x[y]_}_BEGIN_{_a[1]=2;_ (0.00s)
    --- FAIL: TestInterp/BEGIN_{_arr[0];_f(arr)_}_function_f(a)_{_print_"x"_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_a[x];_a=42_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_s=42;_s[x]_} (0.00s)
    --- PASS: TestInterp/function_get(a,_k)_{_return_a[k]_}__BEGIN_{_a_=_42;_print_get(a,_1);_} (0.00s)
    --- PASS: TestInterp/function_get(a,_k)_{_return_a+k_}_BEGIN_{_a[42];_print_get(a,_1);_} (0.00s)
    --- FAIL: TestInterp/{_f(z)_}__function_f(x)_{_print_NR_} (0.00s)
    --- PASS: TestInterp/function_f()_{_f()_}__BEGIN_{_f()_}__#_!awk_!gawk (0.00s)
    --- PASS: TestInterp/function_f(x)_{_0_in_x_}__BEGIN_{_f(FS)_}__#_!awk (0.00s)
    --- FAIL: TestInterp/_function_foo(x)_{_print_"foo",_x_}_function_bar(foo)_{_print_"bar",_f (0.00s)
    --- PASS: TestInterp/_function_foo(foo)_{_print_"foo",_foo_}_function_bar(foo)_{_print_"bar (0.00s)
    --- PASS: TestInterp/function_foo()_{_print_foo_}__BEGIN_{_foo()_} (0.00s)
    --- PASS: TestInterp/function_f(x)_{_print_x,_x();_}__BEGIN_{_f()_} (0.00s)
    --- FAIL: TestInterp/BEGIN_{_getline_a[1];_print_a[1]_} (0.00s)
    --- FAIL: TestInterp/BEGIN_{_getline_$1;_print_$1_} (0.00s)
    --- FAIL: TestInterp/BEGIN_{_"echo_foo"_|_getline_a[1];_print_a[1]_} (0.00s)
    --- FAIL: TestInterp/BEGIN_{_"echo_foo"_|_getline_$1;_print_$1_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_"foo"_|"sort";_print_"bar"_|"sort"_}__#_!fuzz (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_"foo"_|">&2_echo_error"_}__#_!gawk_!fuzz (0.00s)
    --- FAIL: TestInterp/BEGIN_{_"cat"_|_getline;_print_}__#_!fuzz (0.00s)
    --- FAIL: TestInterp/BEGIN_{_print_getline_x_<_"/no/such/file"_}__#_!fuzz (0.00s)
    --- FAIL: TestInterp/BEGIN_{_print_getline_"z";_print_$0_} (0.00s)
    --- FAIL: TestInterp/BEGIN_{_print_getline_x+1;_print_x_} (0.00s)
    --- FAIL: TestInterp/BEGIN_{_print_getline_(x+1);_print_$0_} (0.00s)
    --- FAIL: TestInterp/BEGIN_{_print_getline_foo();_print_$0_}_function_foo()_{_print_"z"_} (0.00s)
    --- FAIL: TestInterp/BEGIN_{_getline;_print($0==0)_} (0.00s)
    --- FAIL: TestInterp/BEGIN_{_getline_x;_print(x==0)_} (0.00s)
    --- FAIL: TestInterp/BEGIN_{_"echo_0.0"_|_getline;_print($0==0)_} (0.00s)
    --- FAIL: TestInterp/BEGIN_{_"echo_0.0"_|_getline_x;_print(x==0)_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_>"out";_getline_<"out"_}__#_!awk_!gawk (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_|"out";_getline_<"out"_}__#_!awk_!gawk (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_>"out";_close("out");_getline_<"out";_print_>"out"_}__#_ (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_>"out";_close("out");_getline_<"out";_print_|"out"_}__#_ (0.00s)
    --- FAIL: TestInterp/BEGIN_{_print_getline_x_<_"-";_print_x_} (0.00s)
    --- FAIL: TestInterp/{_print_$0;_print_getline_x_<"-";_print_x_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_"x"_>"-";_print_"y"_>"-"_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_fflush();_print_fflush("")_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_"x";_print_fflush();_print_"y";_print_fflush("")_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_"x"_>"out";_print_fflush("out");_print_"y";_print_fflush (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_fflush("x")_}__#_!gawk (0.00s)
    --- FAIL: TestInterp/BEGIN_{_"cat"_|_getline;_print_fflush("cat")_}__#_!gawk_!fuzz (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_"x"_>_"out"_}__#_!fuzz (0.00s)
    --- PASS: TestInterp/BEGIN_{_printf_"x"_>_"out"_}__#_!fuzz (0.00s)
    --- PASS: TestInterp/BEGIN_{_print("x"_>_"out")_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_printf("x"_>_"out")_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_if_(1)_printf_"x";_else_printf_"y"_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_printf_"x";_{_printf_"y";_printf_"z"_}_} (0.00s)
    --- PASS: TestInterp/{_$1_=_substr($1,_1,_3)_print_$1_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_f()_} (0.00s)
    --- PASS: TestInterp/function_f()_{}_function_f()_{}_BEGIN_{_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_(1,2),(3,4)_} (0.00s)
    --- PASS: TestInterp/BEGIN_{_print_(1,2,(3,4),(5,6))_} (0.00s)
    --- PASS: TestInterp/{_print_length()_} (0.00s)
=== RUN   TestNative
=== RUN   TestNative/BEGIN_{_print_foo()_}
=== RUN   TestNative/BEGIN_{_print_foo()_}#01
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestNative/BEGIN_{_print_foo()_}#02
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestNative/BEGIN_{_print_foo()_}#03
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestNative/BEGIN_{_print_repeat("xy",_5)_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestNative/BEGIN_{_print_repeat("xy",_5)_}#01
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestNative/_BEGIN_{__print_r0()__print_r1(),_r1(5)__print_r2(),_r2(5)_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestNative/_BEGIN_{__print_r2()_}
=== RUN   TestNative/_BEGIN_{__print__print_bool(),_bool(0),_bool(1),_bool(""),_bool("0"),_
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestNative/_BEGIN_{__print__print_sum(),_sum(1),_sum(2,_3),_sum(4,_5,_6,_7,_8)__p
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestNative/BEGIN_{_0_}
=== RUN   TestNative/BEGIN_{_1_}
=== RUN   TestNative/BEGIN_{_2_}
=== RUN   TestNative/BEGIN_{_3_}
=== RUN   TestNative/BEGIN_{_4_}
=== RUN   TestNative/BEGIN_{_5_}
=== RUN   TestNative/BEGIN_{_6_}
=== RUN   TestNative/BEGIN_{_7_}
=== RUN   TestNative/BEGIN_{_8_}
=== RUN   TestNative/BEGIN_{_print_f(),_f(1,_2)_}
=== RUN   TestNative/BEGIN_{_print_split("x_y",_a)_}
=== RUN   TestNative/_function_foo(n)_{_return_n_*_2_}_BEGIN_{_print_foo(42)_}_
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestNative/BEGIN_{_x=3;_print_foo(x)_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestNative/_function_bar(n)_{_return_foo(n)_}_BEGIN_{_x=4;_y=5;_print_foo(x),_bar
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestNative/BEGIN_{_a["x"]=1;_print_foo(a)_}
=== RUN   TestNative/BEGIN_{_x["x"]=1;_print_f(x)_}__function_f(a)_{_return_foo(a)_}
=== RUN   TestNative/function_f(a)_{_return_foo(a)_}__BEGIN_{_x["x"]=1;_print_f(x)_}
=== RUN   TestNative/BEGIN_{_x["x"]=1;_print_f(x["x"])_}__function_f(a)_{_return_foo(a)_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestNative/BEGIN_{_print_add(1,_add(2,_3))_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestNative/BEGIN_{_print_foo(x)_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestNative/BEGIN_{_print_foo(_var)_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
=== RUN   TestNative/function_foo(y)_{_return_y/2_}__BEGIN_{_print_foo(_var)_}
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.UserCallExpr
--- FAIL: TestNative (0.00s)
    --- PASS: TestNative/BEGIN_{_print_foo()_} (0.00s)
    --- FAIL: TestNative/BEGIN_{_print_foo()_}#01 (0.00s)
    --- FAIL: TestNative/BEGIN_{_print_foo()_}#02 (0.00s)
    --- FAIL: TestNative/BEGIN_{_print_foo()_}#03 (0.00s)
    --- FAIL: TestNative/BEGIN_{_print_repeat("xy",_5)_} (0.00s)
    --- FAIL: TestNative/BEGIN_{_print_repeat("xy",_5)_}#01 (0.00s)
    --- FAIL: TestNative/_BEGIN_{__print_r0()__print_r1(),_r1(5)__print_r2(),_r2(5)_} (0.00s)
    --- PASS: TestNative/_BEGIN_{__print_r2()_} (0.00s)
    --- FAIL: TestNative/_BEGIN_{__print__print_bool(),_bool(0),_bool(1),_bool(""),_bool("0"),_ (0.00s)
    --- FAIL: TestNative/_BEGIN_{__print__print_sum(),_sum(1),_sum(2,_3),_sum(4,_5,_6,_7,_8)__p (0.00s)
    --- PASS: TestNative/BEGIN_{_0_} (0.00s)
    --- PASS: TestNative/BEGIN_{_1_} (0.00s)
    --- PASS: TestNative/BEGIN_{_2_} (0.00s)
    --- PASS: TestNative/BEGIN_{_3_} (0.00s)
    --- PASS: TestNative/BEGIN_{_4_} (0.00s)
    --- PASS: TestNative/BEGIN_{_5_} (0.00s)
    --- PASS: TestNative/BEGIN_{_6_} (0.00s)
    --- PASS: TestNative/BEGIN_{_7_} (0.00s)
    --- PASS: TestNative/BEGIN_{_8_} (0.00s)
    --- PASS: TestNative/BEGIN_{_print_f(),_f(1,_2)_} (0.00s)
    --- PASS: TestNative/BEGIN_{_print_split("x_y",_a)_} (0.00s)
    --- FAIL: TestNative/_function_foo(n)_{_return_n_*_2_}_BEGIN_{_print_foo(42)_}_ (0.00s)
    --- FAIL: TestNative/BEGIN_{_x=3;_print_foo(x)_} (0.00s)
    --- FAIL: TestNative/_function_bar(n)_{_return_foo(n)_}_BEGIN_{_x=4;_y=5;_print_foo(x),_bar (0.00s)
    --- PASS: TestNative/BEGIN_{_a["x"]=1;_print_foo(a)_} (0.00s)
    --- PASS: TestNative/BEGIN_{_x["x"]=1;_print_f(x)_}__function_f(a)_{_return_foo(a)_} (0.00s)
    --- PASS: TestNative/function_f(a)_{_return_foo(a)_}__BEGIN_{_x["x"]=1;_print_f(x)_} (0.00s)
    --- FAIL: TestNative/BEGIN_{_x["x"]=1;_print_f(x["x"])_}__function_f(a)_{_return_foo(a)_} (0.00s)
    --- FAIL: TestNative/BEGIN_{_print_add(1,_add(2,_3))_} (0.00s)
    --- FAIL: TestNative/BEGIN_{_print_foo(x)_} (0.00s)
    --- FAIL: TestNative/BEGIN_{_print_foo(_var)_} (0.00s)
    --- FAIL: TestNative/function_foo(y)_{_return_y/2_}__BEGIN_{_print_foo(_var)_} (0.00s)
=== RUN   TestSafeMode
=== RUN   TestSafeMode/BEGIN_{_print_"hi"_>"out"_}
=== RUN   TestSafeMode/BEGIN_{_print_"hi"_>>"out"_}
=== RUN   TestSafeMode/BEGIN_{_print_"hi"_|"sort"_}
=== RUN   TestSafeMode/BEGIN_{_getline_<"in"_}
=== RUN   TestSafeMode/$0__#_no_files
=== RUN   TestSafeMode/$0__#_files
=== RUN   TestSafeMode/BEGIN_{_"echo_foo"_|getline_}
=== RUN   TestSafeMode/BEGIN_{_system("echo_foo")_}
--- PASS: TestSafeMode (0.00s)
    --- PASS: TestSafeMode/BEGIN_{_print_"hi"_>"out"_} (0.00s)
    --- PASS: TestSafeMode/BEGIN_{_print_"hi"_>>"out"_} (0.00s)
    --- PASS: TestSafeMode/BEGIN_{_print_"hi"_|"sort"_} (0.00s)
    --- PASS: TestSafeMode/BEGIN_{_getline_<"in"_} (0.00s)
    --- PASS: TestSafeMode/$0__#_no_files (0.00s)
    --- PASS: TestSafeMode/$0__#_files (0.00s)
    --- PASS: TestSafeMode/BEGIN_{_"echo_foo"_|getline_} (0.00s)
    --- PASS: TestSafeMode/BEGIN_{_system("echo_foo")_} (0.00s)
=== RUN   TestBytesMode
=== RUN   TestBytesMode/BEGIN_{_print_match("food",_"foo"),_RSTART,_RLENGTH_}
=== RUN   TestBytesMode/BEGIN_{_print_match("x_food_y",_"fo"),_RSTART,_RLENGTH_}
=== RUN   TestBytesMode/BEGIN_{_print_match("x_food_y",_"fox"),_RSTART,_RLENGTH_}
=== RUN   TestBytesMode/BEGIN_{_print_match("x_food_y",_/[fod]+/),_RSTART,_RLENGTH_}
=== RUN   TestBytesMode/BEGIN_{_print_match("絵_fööd_y",_/[föd]+/),_RSTART,_RLENGTH_}
=== RUN   TestBytesMode/{_print_length,_length(),_length("buzz"),_length("")_}
=== RUN   TestBytesMode/BEGIN_{_print_length("a"),_length("絵")_}__#_!awk
=== RUN   TestBytesMode/BEGIN_{_print_index("foo",_"f"),_index("foo0",_0),_index("foo",_"o"),_
=== RUN   TestBytesMode/BEGIN_{_print_index("föö",_"f"),_index("föö0",_0),_index("föö",_
=== RUN   TestBytesMode/BEGIN_{_print_substr("food",_1),_substr("fööd",_1)_}
=== RUN   TestBytesMode/BEGIN_{_print_substr("food",_1,_2),_substr("fööd",_1,_2)_}
=== RUN   TestBytesMode/BEGIN_{_print_substr("food",_1,_4),_substr("fööd",_1,_4)_}
=== RUN   TestBytesMode/BEGIN_{_print_substr("food",_1,_8),_substr("fööd",_1,_8)_}
=== RUN   TestBytesMode/BEGIN_{_print_substr("food",_2),_substr("fööd",_2)_}
=== RUN   TestBytesMode/BEGIN_{_print_substr("food",_2,_2),_substr("fööd",_2,_2)_}
=== RUN   TestBytesMode/BEGIN_{_print_substr("food",_2,_3),_substr("fööd",_2,_3)_}
=== RUN   TestBytesMode/BEGIN_{_print_substr("food",_2,_8),_substr("fööd",_2,_8)_}
=== RUN   TestBytesMode/BEGIN_{_print_substr("food",_0,_8),_substr("fööd",_0,_8)_}
=== RUN   TestBytesMode/BEGIN_{_print_substr("food",_-1,_8),_substr("fööd",_-1,_8)_}
=== RUN   TestBytesMode/BEGIN_{_print_substr("food",_5,_8),_substr("fööd",_5,_8)_}
=== RUN   TestBytesMode/BEGIN_{_print_substr("food",_2,_-3),_substr("fööd",_2,_-3)_}
--- PASS: TestBytesMode (0.00s)
    --- PASS: TestBytesMode/BEGIN_{_print_match("food",_"foo"),_RSTART,_RLENGTH_} (0.00s)
    --- PASS: TestBytesMode/BEGIN_{_print_match("x_food_y",_"fo"),_RSTART,_RLENGTH_} (0.00s)
    --- PASS: TestBytesMode/BEGIN_{_print_match("x_food_y",_"fox"),_RSTART,_RLENGTH_} (0.00s)
    --- PASS: TestBytesMode/BEGIN_{_print_match("x_food_y",_/[fod]+/),_RSTART,_RLENGTH_} (0.00s)
    --- PASS: TestBytesMode/BEGIN_{_print_match("絵_fööd_y",_/[föd]+/),_RSTART,_RLENGTH_} (0.00s)
    --- PASS: TestBytesMode/{_print_length,_length(),_length("buzz"),_length("")_} (0.00s)
    --- PASS: TestBytesMode/BEGIN_{_print_length("a"),_length("絵")_}__#_!awk (0.00s)
    --- PASS: TestBytesMode/BEGIN_{_print_index("foo",_"f"),_index("foo0",_0),_index("foo",_"o"),_ (0.00s)
    --- PASS: TestBytesMode/BEGIN_{_print_index("föö",_"f"),_index("föö0",_0),_index("föö",_ (0.00s)
    --- PASS: TestBytesMode/BEGIN_{_print_substr("food",_1),_substr("fööd",_1)_} (0.00s)
    --- PASS: TestBytesMode/BEGIN_{_print_substr("food",_1,_2),_substr("fööd",_1,_2)_} (0.00s)
    --- PASS: TestBytesMode/BEGIN_{_print_substr("food",_1,_4),_substr("fööd",_1,_4)_} (0.00s)
    --- PASS: TestBytesMode/BEGIN_{_print_substr("food",_1,_8),_substr("fööd",_1,_8)_} (0.00s)
    --- PASS: TestBytesMode/BEGIN_{_print_substr("food",_2),_substr("fööd",_2)_} (0.00s)
    --- PASS: TestBytesMode/BEGIN_{_print_substr("food",_2,_2),_substr("fööd",_2,_2)_} (0.00s)
    --- PASS: TestBytesMode/BEGIN_{_print_substr("food",_2,_3),_substr("fööd",_2,_3)_} (0.00s)
    --- PASS: TestBytesMode/BEGIN_{_print_substr("food",_2,_8),_substr("fööd",_2,_8)_} (0.00s)
    --- PASS: TestBytesMode/BEGIN_{_print_substr("food",_0,_8),_substr("fööd",_0,_8)_} (0.00s)
    --- PASS: TestBytesMode/BEGIN_{_print_substr("food",_-1,_8),_substr("fööd",_-1,_8)_} (0.00s)
    --- PASS: TestBytesMode/BEGIN_{_print_substr("food",_5,_8),_substr("fööd",_5,_8)_} (0.00s)
    --- PASS: TestBytesMode/BEGIN_{_print_substr("food",_2,_-3),_substr("fööd",_2,_-3)_} (0.00s)
=== RUN   TestConfigVarsCorrect
--- PASS: TestConfigVarsCorrect (0.00s)
=== RUN   TestShellCommand
    interp_test.go:811: panic compiling bytecode: unexpected expr type: *ast.GetlineExpr
--- FAIL: TestShellCommand (0.00s)
=== RUN   TestFlushes
    interp_test.go:1242: expected flushes ["" "0\nx\ny\n" "0\nx\ny\n0\nz\n" "0\nx\ny\n0\nz\n0\n"], got ["" "0\nx\ny\n" "0\nx\ny\n0\nz\n" "0\nx\ny\n0\nz\n0\n" "0\nx\ny\n0\nz\n0\n" "0\nx\ny\n0\nz\n0\n0\nx\ny\n" "0\nx\ny\n0\nz\n0\n0\nx\ny\n0\nz\n" "0\nx\ny\n0\nz\n0\n0\nx\ny\n0\nz\n0\n"]
--- FAIL: TestFlushes (0.00s)
=== RUN   TestFlushError
    interp_test.go:1294: expected "error flushing \"stdout\": that's not good, hackers\n", got "error flushing \"stdout\": that's not good, hackers\nerror flushing \"stdout\": that's not good, hackers\n"
--- FAIL: TestFlushError (0.00s)
=== RUN   TestEnviron
--- PASS: TestEnviron (0.00s)
=== RUN   Example
--- PASS: Example (0.00s)
=== RUN   Example_fieldsep
--- PASS: Example_fieldsep (0.00s)
=== RUN   Example_program
--- PASS: Example_program (0.00s)
=== RUN   Example_funcs
--- PASS: Example_funcs (0.00s)
FAIL
FAIL	github.com/benhoyt/goawk/interp	0.078s
FAIL
